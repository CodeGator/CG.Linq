### YamlMime:XRefMap
sorted: true
references:
- uid: CG.Business.Models
  name: CG.Business.Models
  href: api/CG.Business.Models.html
  commentId: N:CG.Business.Models
  fullName: CG.Business.Models
  nameWithType: CG.Business.Models
- uid: CG.Business.Models.IModel`1
  name: IModel<TKey>
  href: api/CG.Business.Models.IModel-1.html
  commentId: T:CG.Business.Models.IModel`1
  name.vb: IModel(Of TKey)
  fullName: CG.Business.Models.IModel<TKey>
  fullName.vb: CG.Business.Models.IModel(Of TKey)
  nameWithType: IModel<TKey>
  nameWithType.vb: IModel(Of TKey)
- uid: CG.Business.Models.IModel`1.Key
  name: Key
  href: api/CG.Business.Models.IModel-1.html#CG_Business_Models_IModel_1_Key
  commentId: P:CG.Business.Models.IModel`1.Key
  fullName: CG.Business.Models.IModel<TKey>.Key
  fullName.vb: CG.Business.Models.IModel(Of TKey).Key
  nameWithType: IModel<TKey>.Key
  nameWithType.vb: IModel(Of TKey).Key
- uid: CG.Business.Models.IModel`1.Key*
  name: Key
  href: api/CG.Business.Models.IModel-1.html#CG_Business_Models_IModel_1_Key_
  commentId: Overload:CG.Business.Models.IModel`1.Key
  isSpec: "True"
  fullName: CG.Business.Models.IModel<TKey>.Key
  fullName.vb: CG.Business.Models.IModel(Of TKey).Key
  nameWithType: IModel<TKey>.Key
  nameWithType.vb: IModel(Of TKey).Key
- uid: CG.Business.Models.IModel`2
  name: IModel<TKey1, TKey2>
  href: api/CG.Business.Models.IModel-2.html
  commentId: T:CG.Business.Models.IModel`2
  name.vb: IModel(Of TKey1, TKey2)
  fullName: CG.Business.Models.IModel<TKey1, TKey2>
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2)
  nameWithType: IModel<TKey1, TKey2>
  nameWithType.vb: IModel(Of TKey1, TKey2)
- uid: CG.Business.Models.IModel`2.Key1
  name: Key1
  href: api/CG.Business.Models.IModel-2.html#CG_Business_Models_IModel_2_Key1
  commentId: P:CG.Business.Models.IModel`2.Key1
  fullName: CG.Business.Models.IModel<TKey1, TKey2>.Key1
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2).Key1
  nameWithType: IModel<TKey1, TKey2>.Key1
  nameWithType.vb: IModel(Of TKey1, TKey2).Key1
- uid: CG.Business.Models.IModel`2.Key1*
  name: Key1
  href: api/CG.Business.Models.IModel-2.html#CG_Business_Models_IModel_2_Key1_
  commentId: Overload:CG.Business.Models.IModel`2.Key1
  isSpec: "True"
  fullName: CG.Business.Models.IModel<TKey1, TKey2>.Key1
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2).Key1
  nameWithType: IModel<TKey1, TKey2>.Key1
  nameWithType.vb: IModel(Of TKey1, TKey2).Key1
- uid: CG.Business.Models.IModel`2.Key2
  name: Key2
  href: api/CG.Business.Models.IModel-2.html#CG_Business_Models_IModel_2_Key2
  commentId: P:CG.Business.Models.IModel`2.Key2
  fullName: CG.Business.Models.IModel<TKey1, TKey2>.Key2
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2).Key2
  nameWithType: IModel<TKey1, TKey2>.Key2
  nameWithType.vb: IModel(Of TKey1, TKey2).Key2
- uid: CG.Business.Models.IModel`2.Key2*
  name: Key2
  href: api/CG.Business.Models.IModel-2.html#CG_Business_Models_IModel_2_Key2_
  commentId: Overload:CG.Business.Models.IModel`2.Key2
  isSpec: "True"
  fullName: CG.Business.Models.IModel<TKey1, TKey2>.Key2
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2).Key2
  nameWithType: IModel<TKey1, TKey2>.Key2
  nameWithType.vb: IModel(Of TKey1, TKey2).Key2
- uid: CG.Business.Models.IModel`3
  name: IModel<TKey1, TKey2, TKey3>
  href: api/CG.Business.Models.IModel-3.html
  commentId: T:CG.Business.Models.IModel`3
  name.vb: IModel(Of TKey1, TKey2, TKey3)
  fullName: CG.Business.Models.IModel<TKey1, TKey2, TKey3>
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2, TKey3)
  nameWithType: IModel<TKey1, TKey2, TKey3>
  nameWithType.vb: IModel(Of TKey1, TKey2, TKey3)
- uid: CG.Business.Models.IModel`3.Key1
  name: Key1
  href: api/CG.Business.Models.IModel-3.html#CG_Business_Models_IModel_3_Key1
  commentId: P:CG.Business.Models.IModel`3.Key1
  fullName: CG.Business.Models.IModel<TKey1, TKey2, TKey3>.Key1
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2, TKey3).Key1
  nameWithType: IModel<TKey1, TKey2, TKey3>.Key1
  nameWithType.vb: IModel(Of TKey1, TKey2, TKey3).Key1
- uid: CG.Business.Models.IModel`3.Key1*
  name: Key1
  href: api/CG.Business.Models.IModel-3.html#CG_Business_Models_IModel_3_Key1_
  commentId: Overload:CG.Business.Models.IModel`3.Key1
  isSpec: "True"
  fullName: CG.Business.Models.IModel<TKey1, TKey2, TKey3>.Key1
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2, TKey3).Key1
  nameWithType: IModel<TKey1, TKey2, TKey3>.Key1
  nameWithType.vb: IModel(Of TKey1, TKey2, TKey3).Key1
- uid: CG.Business.Models.IModel`3.Key2
  name: Key2
  href: api/CG.Business.Models.IModel-3.html#CG_Business_Models_IModel_3_Key2
  commentId: P:CG.Business.Models.IModel`3.Key2
  fullName: CG.Business.Models.IModel<TKey1, TKey2, TKey3>.Key2
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2, TKey3).Key2
  nameWithType: IModel<TKey1, TKey2, TKey3>.Key2
  nameWithType.vb: IModel(Of TKey1, TKey2, TKey3).Key2
- uid: CG.Business.Models.IModel`3.Key2*
  name: Key2
  href: api/CG.Business.Models.IModel-3.html#CG_Business_Models_IModel_3_Key2_
  commentId: Overload:CG.Business.Models.IModel`3.Key2
  isSpec: "True"
  fullName: CG.Business.Models.IModel<TKey1, TKey2, TKey3>.Key2
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2, TKey3).Key2
  nameWithType: IModel<TKey1, TKey2, TKey3>.Key2
  nameWithType.vb: IModel(Of TKey1, TKey2, TKey3).Key2
- uid: CG.Business.Models.IModel`3.Key3
  name: Key3
  href: api/CG.Business.Models.IModel-3.html#CG_Business_Models_IModel_3_Key3
  commentId: P:CG.Business.Models.IModel`3.Key3
  fullName: CG.Business.Models.IModel<TKey1, TKey2, TKey3>.Key3
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2, TKey3).Key3
  nameWithType: IModel<TKey1, TKey2, TKey3>.Key3
  nameWithType.vb: IModel(Of TKey1, TKey2, TKey3).Key3
- uid: CG.Business.Models.IModel`3.Key3*
  name: Key3
  href: api/CG.Business.Models.IModel-3.html#CG_Business_Models_IModel_3_Key3_
  commentId: Overload:CG.Business.Models.IModel`3.Key3
  isSpec: "True"
  fullName: CG.Business.Models.IModel<TKey1, TKey2, TKey3>.Key3
  fullName.vb: CG.Business.Models.IModel(Of TKey1, TKey2, TKey3).Key3
  nameWithType: IModel<TKey1, TKey2, TKey3>.Key3
  nameWithType.vb: IModel(Of TKey1, TKey2, TKey3).Key3
- uid: CG.Business.Models.ModelBase`1
  name: ModelBase<TKey>
  href: api/CG.Business.Models.ModelBase-1.html
  commentId: T:CG.Business.Models.ModelBase`1
  name.vb: ModelBase(Of TKey)
  fullName: CG.Business.Models.ModelBase<TKey>
  fullName.vb: CG.Business.Models.ModelBase(Of TKey)
  nameWithType: ModelBase<TKey>
  nameWithType.vb: ModelBase(Of TKey)
- uid: CG.Business.Models.ModelBase`1.Equals(System.Object)
  name: Equals(Object)
  href: api/CG.Business.Models.ModelBase-1.html#CG_Business_Models_ModelBase_1_Equals_System_Object_
  commentId: M:CG.Business.Models.ModelBase`1.Equals(System.Object)
  fullName: CG.Business.Models.ModelBase<TKey>.Equals(System.Object)
  fullName.vb: CG.Business.Models.ModelBase(Of TKey).Equals(System.Object)
  nameWithType: ModelBase<TKey>.Equals(Object)
  nameWithType.vb: ModelBase(Of TKey).Equals(Object)
- uid: CG.Business.Models.ModelBase`1.Equals*
  name: Equals
  href: api/CG.Business.Models.ModelBase-1.html#CG_Business_Models_ModelBase_1_Equals_
  commentId: Overload:CG.Business.Models.ModelBase`1.Equals
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey>.Equals
  fullName.vb: CG.Business.Models.ModelBase(Of TKey).Equals
  nameWithType: ModelBase<TKey>.Equals
  nameWithType.vb: ModelBase(Of TKey).Equals
- uid: CG.Business.Models.ModelBase`1.GetHashCode
  name: GetHashCode()
  href: api/CG.Business.Models.ModelBase-1.html#CG_Business_Models_ModelBase_1_GetHashCode
  commentId: M:CG.Business.Models.ModelBase`1.GetHashCode
  fullName: CG.Business.Models.ModelBase<TKey>.GetHashCode()
  fullName.vb: CG.Business.Models.ModelBase(Of TKey).GetHashCode()
  nameWithType: ModelBase<TKey>.GetHashCode()
  nameWithType.vb: ModelBase(Of TKey).GetHashCode()
- uid: CG.Business.Models.ModelBase`1.GetHashCode*
  name: GetHashCode
  href: api/CG.Business.Models.ModelBase-1.html#CG_Business_Models_ModelBase_1_GetHashCode_
  commentId: Overload:CG.Business.Models.ModelBase`1.GetHashCode
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey>.GetHashCode
  fullName.vb: CG.Business.Models.ModelBase(Of TKey).GetHashCode
  nameWithType: ModelBase<TKey>.GetHashCode
  nameWithType.vb: ModelBase(Of TKey).GetHashCode
- uid: CG.Business.Models.ModelBase`1.Key
  name: Key
  href: api/CG.Business.Models.ModelBase-1.html#CG_Business_Models_ModelBase_1_Key
  commentId: P:CG.Business.Models.ModelBase`1.Key
  fullName: CG.Business.Models.ModelBase<TKey>.Key
  fullName.vb: CG.Business.Models.ModelBase(Of TKey).Key
  nameWithType: ModelBase<TKey>.Key
  nameWithType.vb: ModelBase(Of TKey).Key
- uid: CG.Business.Models.ModelBase`1.Key*
  name: Key
  href: api/CG.Business.Models.ModelBase-1.html#CG_Business_Models_ModelBase_1_Key_
  commentId: Overload:CG.Business.Models.ModelBase`1.Key
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey>.Key
  fullName.vb: CG.Business.Models.ModelBase(Of TKey).Key
  nameWithType: ModelBase<TKey>.Key
  nameWithType.vb: ModelBase(Of TKey).Key
- uid: CG.Business.Models.ModelBase`1.ToString
  name: ToString()
  href: api/CG.Business.Models.ModelBase-1.html#CG_Business_Models_ModelBase_1_ToString
  commentId: M:CG.Business.Models.ModelBase`1.ToString
  fullName: CG.Business.Models.ModelBase<TKey>.ToString()
  fullName.vb: CG.Business.Models.ModelBase(Of TKey).ToString()
  nameWithType: ModelBase<TKey>.ToString()
  nameWithType.vb: ModelBase(Of TKey).ToString()
- uid: CG.Business.Models.ModelBase`1.ToString*
  name: ToString
  href: api/CG.Business.Models.ModelBase-1.html#CG_Business_Models_ModelBase_1_ToString_
  commentId: Overload:CG.Business.Models.ModelBase`1.ToString
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey>.ToString
  fullName.vb: CG.Business.Models.ModelBase(Of TKey).ToString
  nameWithType: ModelBase<TKey>.ToString
  nameWithType.vb: ModelBase(Of TKey).ToString
- uid: CG.Business.Models.ModelBase`2
  name: ModelBase<TKey1, TKey2>
  href: api/CG.Business.Models.ModelBase-2.html
  commentId: T:CG.Business.Models.ModelBase`2
  name.vb: ModelBase(Of TKey1, TKey2)
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2)
  nameWithType: ModelBase<TKey1, TKey2>
  nameWithType.vb: ModelBase(Of TKey1, TKey2)
- uid: CG.Business.Models.ModelBase`2.Equals(System.Object)
  name: Equals(Object)
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_Equals_System_Object_
  commentId: M:CG.Business.Models.ModelBase`2.Equals(System.Object)
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.Equals(System.Object)
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).Equals(System.Object)
  nameWithType: ModelBase<TKey1, TKey2>.Equals(Object)
  nameWithType.vb: ModelBase(Of TKey1, TKey2).Equals(Object)
- uid: CG.Business.Models.ModelBase`2.Equals*
  name: Equals
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_Equals_
  commentId: Overload:CG.Business.Models.ModelBase`2.Equals
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.Equals
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).Equals
  nameWithType: ModelBase<TKey1, TKey2>.Equals
  nameWithType.vb: ModelBase(Of TKey1, TKey2).Equals
- uid: CG.Business.Models.ModelBase`2.GetHashCode
  name: GetHashCode()
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_GetHashCode
  commentId: M:CG.Business.Models.ModelBase`2.GetHashCode
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.GetHashCode()
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).GetHashCode()
  nameWithType: ModelBase<TKey1, TKey2>.GetHashCode()
  nameWithType.vb: ModelBase(Of TKey1, TKey2).GetHashCode()
- uid: CG.Business.Models.ModelBase`2.GetHashCode*
  name: GetHashCode
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_GetHashCode_
  commentId: Overload:CG.Business.Models.ModelBase`2.GetHashCode
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.GetHashCode
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).GetHashCode
  nameWithType: ModelBase<TKey1, TKey2>.GetHashCode
  nameWithType.vb: ModelBase(Of TKey1, TKey2).GetHashCode
- uid: CG.Business.Models.ModelBase`2.Key1
  name: Key1
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_Key1
  commentId: P:CG.Business.Models.ModelBase`2.Key1
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.Key1
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).Key1
  nameWithType: ModelBase<TKey1, TKey2>.Key1
  nameWithType.vb: ModelBase(Of TKey1, TKey2).Key1
- uid: CG.Business.Models.ModelBase`2.Key1*
  name: Key1
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_Key1_
  commentId: Overload:CG.Business.Models.ModelBase`2.Key1
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.Key1
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).Key1
  nameWithType: ModelBase<TKey1, TKey2>.Key1
  nameWithType.vb: ModelBase(Of TKey1, TKey2).Key1
- uid: CG.Business.Models.ModelBase`2.Key2
  name: Key2
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_Key2
  commentId: P:CG.Business.Models.ModelBase`2.Key2
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.Key2
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).Key2
  nameWithType: ModelBase<TKey1, TKey2>.Key2
  nameWithType.vb: ModelBase(Of TKey1, TKey2).Key2
- uid: CG.Business.Models.ModelBase`2.Key2*
  name: Key2
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_Key2_
  commentId: Overload:CG.Business.Models.ModelBase`2.Key2
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.Key2
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).Key2
  nameWithType: ModelBase<TKey1, TKey2>.Key2
  nameWithType.vb: ModelBase(Of TKey1, TKey2).Key2
- uid: CG.Business.Models.ModelBase`2.ToString
  name: ToString()
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_ToString
  commentId: M:CG.Business.Models.ModelBase`2.ToString
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.ToString()
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).ToString()
  nameWithType: ModelBase<TKey1, TKey2>.ToString()
  nameWithType.vb: ModelBase(Of TKey1, TKey2).ToString()
- uid: CG.Business.Models.ModelBase`2.ToString*
  name: ToString
  href: api/CG.Business.Models.ModelBase-2.html#CG_Business_Models_ModelBase_2_ToString_
  commentId: Overload:CG.Business.Models.ModelBase`2.ToString
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2>.ToString
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2).ToString
  nameWithType: ModelBase<TKey1, TKey2>.ToString
  nameWithType.vb: ModelBase(Of TKey1, TKey2).ToString
- uid: CG.Business.Models.ModelBase`3
  name: ModelBase<TKey1, TKey2, TKey3>
  href: api/CG.Business.Models.ModelBase-3.html
  commentId: T:CG.Business.Models.ModelBase`3
  name.vb: ModelBase(Of TKey1, TKey2, TKey3)
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3)
  nameWithType: ModelBase<TKey1, TKey2, TKey3>
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3)
- uid: CG.Business.Models.ModelBase`3.Equals(System.Object)
  name: Equals(Object)
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_Equals_System_Object_
  commentId: M:CG.Business.Models.ModelBase`3.Equals(System.Object)
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.Equals(System.Object)
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).Equals(System.Object)
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.Equals(Object)
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).Equals(Object)
- uid: CG.Business.Models.ModelBase`3.Equals*
  name: Equals
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_Equals_
  commentId: Overload:CG.Business.Models.ModelBase`3.Equals
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.Equals
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).Equals
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.Equals
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).Equals
- uid: CG.Business.Models.ModelBase`3.GetHashCode
  name: GetHashCode()
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_GetHashCode
  commentId: M:CG.Business.Models.ModelBase`3.GetHashCode
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.GetHashCode()
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).GetHashCode()
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.GetHashCode()
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).GetHashCode()
- uid: CG.Business.Models.ModelBase`3.GetHashCode*
  name: GetHashCode
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_GetHashCode_
  commentId: Overload:CG.Business.Models.ModelBase`3.GetHashCode
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.GetHashCode
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).GetHashCode
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.GetHashCode
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).GetHashCode
- uid: CG.Business.Models.ModelBase`3.Key1
  name: Key1
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_Key1
  commentId: P:CG.Business.Models.ModelBase`3.Key1
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.Key1
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).Key1
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.Key1
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).Key1
- uid: CG.Business.Models.ModelBase`3.Key1*
  name: Key1
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_Key1_
  commentId: Overload:CG.Business.Models.ModelBase`3.Key1
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.Key1
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).Key1
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.Key1
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).Key1
- uid: CG.Business.Models.ModelBase`3.Key2
  name: Key2
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_Key2
  commentId: P:CG.Business.Models.ModelBase`3.Key2
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.Key2
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).Key2
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.Key2
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).Key2
- uid: CG.Business.Models.ModelBase`3.Key2*
  name: Key2
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_Key2_
  commentId: Overload:CG.Business.Models.ModelBase`3.Key2
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.Key2
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).Key2
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.Key2
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).Key2
- uid: CG.Business.Models.ModelBase`3.Key3
  name: Key3
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_Key3
  commentId: P:CG.Business.Models.ModelBase`3.Key3
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.Key3
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).Key3
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.Key3
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).Key3
- uid: CG.Business.Models.ModelBase`3.Key3*
  name: Key3
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_Key3_
  commentId: Overload:CG.Business.Models.ModelBase`3.Key3
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.Key3
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).Key3
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.Key3
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).Key3
- uid: CG.Business.Models.ModelBase`3.ToString
  name: ToString()
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_ToString
  commentId: M:CG.Business.Models.ModelBase`3.ToString
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.ToString()
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).ToString()
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.ToString()
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).ToString()
- uid: CG.Business.Models.ModelBase`3.ToString*
  name: ToString
  href: api/CG.Business.Models.ModelBase-3.html#CG_Business_Models_ModelBase_3_ToString_
  commentId: Overload:CG.Business.Models.ModelBase`3.ToString
  isSpec: "True"
  fullName: CG.Business.Models.ModelBase<TKey1, TKey2, TKey3>.ToString
  fullName.vb: CG.Business.Models.ModelBase(Of TKey1, TKey2, TKey3).ToString
  nameWithType: ModelBase<TKey1, TKey2, TKey3>.ToString
  nameWithType.vb: ModelBase(Of TKey1, TKey2, TKey3).ToString
- uid: CG.Business.Repositories
  name: CG.Business.Repositories
  href: api/CG.Business.Repositories.html
  commentId: N:CG.Business.Repositories
  fullName: CG.Business.Repositories
  nameWithType: CG.Business.Repositories
- uid: CG.Business.Repositories.CrudRepositoryBase`3
  name: CrudRepositoryBase<TOptions, TModel, TKey>
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html
  commentId: T:CG.Business.Repositories.CrudRepositoryBase`3
  name.vb: CrudRepositoryBase(Of TOptions, TModel, TKey)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey)
- uid: CG.Business.Repositories.CrudRepositoryBase`3.#ctor(`0)
  name: CrudRepositoryBase(TOptions)
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html#CG_Business_Repositories_CrudRepositoryBase_3__ctor__0_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`3.#ctor(`0)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.CrudRepositoryBase(TOptions)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey).CrudRepositoryBase(TOptions)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>.CrudRepositoryBase(TOptions)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey).CrudRepositoryBase(TOptions)
- uid: CG.Business.Repositories.CrudRepositoryBase`3.#ctor*
  name: CrudRepositoryBase
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html#CG_Business_Repositories_CrudRepositoryBase_3__ctor_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`3.#ctor
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.CrudRepositoryBase
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey).CrudRepositoryBase
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>.CrudRepositoryBase
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey).CrudRepositoryBase
- uid: CG.Business.Repositories.CrudRepositoryBase`3.AddAsync(`1,System.Threading.CancellationToken)
  name: AddAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html#CG_Business_Repositories_CrudRepositoryBase_3_AddAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`3.AddAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey).AddAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey).AddAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`3.AddAsync*
  name: AddAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html#CG_Business_Repositories_CrudRepositoryBase_3_AddAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`3.AddAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey).AddAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>.AddAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey).AddAsync
- uid: CG.Business.Repositories.CrudRepositoryBase`3.DeleteAsync(`1,System.Threading.CancellationToken)
  name: DeleteAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html#CG_Business_Repositories_CrudRepositoryBase_3_DeleteAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`3.DeleteAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey).DeleteAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey).DeleteAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`3.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html#CG_Business_Repositories_CrudRepositoryBase_3_DeleteAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`3.DeleteAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey).DeleteAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>.DeleteAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey).DeleteAsync
- uid: CG.Business.Repositories.CrudRepositoryBase`3.UpdateAsync(`1,System.Threading.CancellationToken)
  name: UpdateAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html#CG_Business_Repositories_CrudRepositoryBase_3_UpdateAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`3.UpdateAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey).UpdateAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey).UpdateAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`3.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-3.html#CG_Business_Repositories_CrudRepositoryBase_3_UpdateAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`3.UpdateAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey).UpdateAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey>.UpdateAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey).UpdateAsync
- uid: CG.Business.Repositories.CrudRepositoryBase`4
  name: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html
  commentId: T:CG.Business.Repositories.CrudRepositoryBase`4
  name.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2)
- uid: CG.Business.Repositories.CrudRepositoryBase`4.#ctor(`0)
  name: CrudRepositoryBase(TOptions)
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html#CG_Business_Repositories_CrudRepositoryBase_4__ctor__0_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`4.#ctor(`0)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.CrudRepositoryBase(TOptions)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).CrudRepositoryBase(TOptions)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.CrudRepositoryBase(TOptions)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).CrudRepositoryBase(TOptions)
- uid: CG.Business.Repositories.CrudRepositoryBase`4.#ctor*
  name: CrudRepositoryBase
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html#CG_Business_Repositories_CrudRepositoryBase_4__ctor_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`4.#ctor
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.CrudRepositoryBase
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).CrudRepositoryBase
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.CrudRepositoryBase
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).CrudRepositoryBase
- uid: CG.Business.Repositories.CrudRepositoryBase`4.AddAsync(`1,System.Threading.CancellationToken)
  name: AddAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html#CG_Business_Repositories_CrudRepositoryBase_4_AddAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`4.AddAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).AddAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).AddAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`4.AddAsync*
  name: AddAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html#CG_Business_Repositories_CrudRepositoryBase_4_AddAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`4.AddAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).AddAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.AddAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).AddAsync
- uid: CG.Business.Repositories.CrudRepositoryBase`4.DeleteAsync(`1,System.Threading.CancellationToken)
  name: DeleteAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html#CG_Business_Repositories_CrudRepositoryBase_4_DeleteAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`4.DeleteAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).DeleteAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).DeleteAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`4.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html#CG_Business_Repositories_CrudRepositoryBase_4_DeleteAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`4.DeleteAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).DeleteAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.DeleteAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).DeleteAsync
- uid: CG.Business.Repositories.CrudRepositoryBase`4.UpdateAsync(`1,System.Threading.CancellationToken)
  name: UpdateAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html#CG_Business_Repositories_CrudRepositoryBase_4_UpdateAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`4.UpdateAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).UpdateAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).UpdateAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`4.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-4.html#CG_Business_Repositories_CrudRepositoryBase_4_UpdateAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`4.UpdateAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).UpdateAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>.UpdateAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2).UpdateAsync
- uid: CG.Business.Repositories.CrudRepositoryBase`5
  name: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html
  commentId: T:CG.Business.Repositories.CrudRepositoryBase`5
  name.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3)
- uid: CG.Business.Repositories.CrudRepositoryBase`5.#ctor(`0)
  name: CrudRepositoryBase(TOptions)
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html#CG_Business_Repositories_CrudRepositoryBase_5__ctor__0_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`5.#ctor(`0)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.CrudRepositoryBase(TOptions)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).CrudRepositoryBase(TOptions)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.CrudRepositoryBase(TOptions)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).CrudRepositoryBase(TOptions)
- uid: CG.Business.Repositories.CrudRepositoryBase`5.#ctor*
  name: CrudRepositoryBase
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html#CG_Business_Repositories_CrudRepositoryBase_5__ctor_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`5.#ctor
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.CrudRepositoryBase
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).CrudRepositoryBase
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.CrudRepositoryBase
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).CrudRepositoryBase
- uid: CG.Business.Repositories.CrudRepositoryBase`5.AddAsync(`1,System.Threading.CancellationToken)
  name: AddAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html#CG_Business_Repositories_CrudRepositoryBase_5_AddAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`5.AddAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).AddAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).AddAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`5.AddAsync*
  name: AddAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html#CG_Business_Repositories_CrudRepositoryBase_5_AddAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`5.AddAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).AddAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.AddAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).AddAsync
- uid: CG.Business.Repositories.CrudRepositoryBase`5.DeleteAsync(`1,System.Threading.CancellationToken)
  name: DeleteAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html#CG_Business_Repositories_CrudRepositoryBase_5_DeleteAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`5.DeleteAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).DeleteAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).DeleteAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`5.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html#CG_Business_Repositories_CrudRepositoryBase_5_DeleteAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`5.DeleteAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).DeleteAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.DeleteAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).DeleteAsync
- uid: CG.Business.Repositories.CrudRepositoryBase`5.UpdateAsync(`1,System.Threading.CancellationToken)
  name: UpdateAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html#CG_Business_Repositories_CrudRepositoryBase_5_UpdateAsync__1_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.CrudRepositoryBase`5.UpdateAsync(`1,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).UpdateAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync(TModel, CancellationToken)
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).UpdateAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.CrudRepositoryBase`5.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Business.Repositories.CrudRepositoryBase-5.html#CG_Business_Repositories_CrudRepositoryBase_5_UpdateAsync_
  commentId: Overload:CG.Business.Repositories.CrudRepositoryBase`5.UpdateAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync
  fullName.vb: CG.Business.Repositories.CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).UpdateAsync
  nameWithType: CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.UpdateAsync
  nameWithType.vb: CrudRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).UpdateAsync
- uid: CG.Business.Repositories.ICrudRepository`2
  name: ICrudRepository<TModel, TKey>
  href: api/CG.Business.Repositories.ICrudRepository-2.html
  commentId: T:CG.Business.Repositories.ICrudRepository`2
  name.vb: ICrudRepository(Of TModel, TKey)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey>
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey)
  nameWithType: ICrudRepository<TModel, TKey>
  nameWithType.vb: ICrudRepository(Of TModel, TKey)
- uid: CG.Business.Repositories.ICrudRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  name: AddAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.ICrudRepository-2.html#CG_Business_Repositories_ICrudRepository_2_AddAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.ICrudRepository`2.AddAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey).AddAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TModel, TKey>.AddAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TModel, TKey).AddAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.ICrudRepository`2.AddAsync*
  name: AddAsync
  href: api/CG.Business.Repositories.ICrudRepository-2.html#CG_Business_Repositories_ICrudRepository_2_AddAsync_
  commentId: Overload:CG.Business.Repositories.ICrudRepository`2.AddAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey>.AddAsync
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey).AddAsync
  nameWithType: ICrudRepository<TModel, TKey>.AddAsync
  nameWithType.vb: ICrudRepository(Of TModel, TKey).AddAsync
- uid: CG.Business.Repositories.ICrudRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.ICrudRepository-2.html#CG_Business_Repositories_ICrudRepository_2_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.ICrudRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey).DeleteAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TModel, TKey>.DeleteAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TModel, TKey).DeleteAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.ICrudRepository`2.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Business.Repositories.ICrudRepository-2.html#CG_Business_Repositories_ICrudRepository_2_DeleteAsync_
  commentId: Overload:CG.Business.Repositories.ICrudRepository`2.DeleteAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey>.DeleteAsync
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey).DeleteAsync
  nameWithType: ICrudRepository<TModel, TKey>.DeleteAsync
  nameWithType.vb: ICrudRepository(Of TModel, TKey).DeleteAsync
- uid: CG.Business.Repositories.ICrudRepository`2.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.ICrudRepository-2.html#CG_Business_Repositories_ICrudRepository_2_UpdateAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.ICrudRepository`2.UpdateAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey).UpdateAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TModel, TKey>.UpdateAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TModel, TKey).UpdateAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.ICrudRepository`2.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Business.Repositories.ICrudRepository-2.html#CG_Business_Repositories_ICrudRepository_2_UpdateAsync_
  commentId: Overload:CG.Business.Repositories.ICrudRepository`2.UpdateAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey>.UpdateAsync
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey).UpdateAsync
  nameWithType: ICrudRepository<TModel, TKey>.UpdateAsync
  nameWithType.vb: ICrudRepository(Of TModel, TKey).UpdateAsync
- uid: CG.Business.Repositories.ICrudRepository`3
  name: ICrudRepository<TModel, TKey1, TKey2>
  href: api/CG.Business.Repositories.ICrudRepository-3.html
  commentId: T:CG.Business.Repositories.ICrudRepository`3
  name.vb: ICrudRepository(Of TModel, TKey1, TKey2)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2>
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey1, TKey2)
  nameWithType: ICrudRepository<TModel, TKey1, TKey2>
  nameWithType.vb: ICrudRepository(Of TModel, TKey1, TKey2)
- uid: CG.Business.Repositories.ICrudRepository`3.AddAsync(`0,System.Threading.CancellationToken)
  name: AddAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.ICrudRepository-3.html#CG_Business_Repositories_ICrudRepository_3_AddAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.ICrudRepository`3.AddAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2>.AddAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey1, TKey2).AddAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TModel, TKey1, TKey2>.AddAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TModel, TKey1, TKey2).AddAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.ICrudRepository`3.AddAsync*
  name: AddAsync
  href: api/CG.Business.Repositories.ICrudRepository-3.html#CG_Business_Repositories_ICrudRepository_3_AddAsync_
  commentId: Overload:CG.Business.Repositories.ICrudRepository`3.AddAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2>.AddAsync
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey1, TKey2).AddAsync
  nameWithType: ICrudRepository<TModel, TKey1, TKey2>.AddAsync
  nameWithType.vb: ICrudRepository(Of TModel, TKey1, TKey2).AddAsync
- uid: CG.Business.Repositories.ICrudRepository`3.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.ICrudRepository-3.html#CG_Business_Repositories_ICrudRepository_3_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.ICrudRepository`3.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2>.DeleteAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey1, TKey2).DeleteAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TModel, TKey1, TKey2>.DeleteAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TModel, TKey1, TKey2).DeleteAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.ICrudRepository`3.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Business.Repositories.ICrudRepository-3.html#CG_Business_Repositories_ICrudRepository_3_DeleteAsync_
  commentId: Overload:CG.Business.Repositories.ICrudRepository`3.DeleteAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2>.DeleteAsync
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey1, TKey2).DeleteAsync
  nameWithType: ICrudRepository<TModel, TKey1, TKey2>.DeleteAsync
  nameWithType.vb: ICrudRepository(Of TModel, TKey1, TKey2).DeleteAsync
- uid: CG.Business.Repositories.ICrudRepository`3.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TModel, CancellationToken)
  href: api/CG.Business.Repositories.ICrudRepository-3.html#CG_Business_Repositories_ICrudRepository_3_UpdateAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Repositories.ICrudRepository`3.UpdateAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2>.UpdateAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey1, TKey2).UpdateAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudRepository<TModel, TKey1, TKey2>.UpdateAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudRepository(Of TModel, TKey1, TKey2).UpdateAsync(TModel, CancellationToken)
- uid: CG.Business.Repositories.ICrudRepository`3.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Business.Repositories.ICrudRepository-3.html#CG_Business_Repositories_ICrudRepository_3_UpdateAsync_
  commentId: Overload:CG.Business.Repositories.ICrudRepository`3.UpdateAsync
  isSpec: "True"
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2>.UpdateAsync
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey1, TKey2).UpdateAsync
  nameWithType: ICrudRepository<TModel, TKey1, TKey2>.UpdateAsync
  nameWithType.vb: ICrudRepository(Of TModel, TKey1, TKey2).UpdateAsync
- uid: CG.Business.Repositories.ICrudRepository`4
  name: ICrudRepository<TModel, TKey1, TKey2, TKey3>
  href: api/CG.Business.Repositories.ICrudRepository-4.html
  commentId: T:CG.Business.Repositories.ICrudRepository`4
  name.vb: ICrudRepository(Of TModel, TKey1, TKey2, TKey3)
  fullName: CG.Business.Repositories.ICrudRepository<TModel, TKey1, TKey2, TKey3>
  fullName.vb: CG.Business.Repositories.ICrudRepository(Of TModel, TKey1, TKey2, TKey3)
  nameWithType: ICrudRepository<TModel, TKey1, TKey2, TKey3>
  nameWithType.vb: ICrudRepository(Of TModel, TKey1, TKey2, TKey3)
- uid: CG.Business.Repositories.ILinqRepository`1
  name: ILinqRepository<TModel>
  href: api/CG.Business.Repositories.ILinqRepository-1.html
  commentId: T:CG.Business.Repositories.ILinqRepository`1
  name.vb: ILinqRepository(Of TModel)
  fullName: CG.Business.Repositories.ILinqRepository<TModel>
  fullName.vb: CG.Business.Repositories.ILinqRepository(Of TModel)
  nameWithType: ILinqRepository<TModel>
  nameWithType.vb: ILinqRepository(Of TModel)
- uid: CG.Business.Repositories.ILinqRepository`1.AsQueryable
  name: AsQueryable()
  href: api/CG.Business.Repositories.ILinqRepository-1.html#CG_Business_Repositories_ILinqRepository_1_AsQueryable
  commentId: M:CG.Business.Repositories.ILinqRepository`1.AsQueryable
  fullName: CG.Business.Repositories.ILinqRepository<TModel>.AsQueryable()
  fullName.vb: CG.Business.Repositories.ILinqRepository(Of TModel).AsQueryable()
  nameWithType: ILinqRepository<TModel>.AsQueryable()
  nameWithType.vb: ILinqRepository(Of TModel).AsQueryable()
- uid: CG.Business.Repositories.ILinqRepository`1.AsQueryable*
  name: AsQueryable
  href: api/CG.Business.Repositories.ILinqRepository-1.html#CG_Business_Repositories_ILinqRepository_1_AsQueryable_
  commentId: Overload:CG.Business.Repositories.ILinqRepository`1.AsQueryable
  isSpec: "True"
  fullName: CG.Business.Repositories.ILinqRepository<TModel>.AsQueryable
  fullName.vb: CG.Business.Repositories.ILinqRepository(Of TModel).AsQueryable
  nameWithType: ILinqRepository<TModel>.AsQueryable
  nameWithType.vb: ILinqRepository(Of TModel).AsQueryable
- uid: CG.Business.Repositories.KeyUtility
  name: KeyUtility
  href: api/CG.Business.Repositories.KeyUtility.html
  commentId: T:CG.Business.Repositories.KeyUtility
  fullName: CG.Business.Repositories.KeyUtility
  nameWithType: KeyUtility
- uid: CG.Business.Repositories.KeyUtility.CreateRandomKey*
  name: CreateRandomKey
  href: api/CG.Business.Repositories.KeyUtility.html#CG_Business_Repositories_KeyUtility_CreateRandomKey_
  commentId: Overload:CG.Business.Repositories.KeyUtility.CreateRandomKey
  isSpec: "True"
  fullName: CG.Business.Repositories.KeyUtility.CreateRandomKey
  nameWithType: KeyUtility.CreateRandomKey
- uid: CG.Business.Repositories.KeyUtility.CreateRandomKey``1
  name: CreateRandomKey<TKey>()
  href: api/CG.Business.Repositories.KeyUtility.html#CG_Business_Repositories_KeyUtility_CreateRandomKey__1
  commentId: M:CG.Business.Repositories.KeyUtility.CreateRandomKey``1
  name.vb: CreateRandomKey(Of TKey)()
  fullName: CG.Business.Repositories.KeyUtility.CreateRandomKey<TKey>()
  fullName.vb: CG.Business.Repositories.KeyUtility.CreateRandomKey(Of TKey)()
  nameWithType: KeyUtility.CreateRandomKey<TKey>()
  nameWithType.vb: KeyUtility.CreateRandomKey(Of TKey)()
- uid: CG.Business.Repositories.KeyUtility.IsKeyMissing*
  name: IsKeyMissing
  href: api/CG.Business.Repositories.KeyUtility.html#CG_Business_Repositories_KeyUtility_IsKeyMissing_
  commentId: Overload:CG.Business.Repositories.KeyUtility.IsKeyMissing
  isSpec: "True"
  fullName: CG.Business.Repositories.KeyUtility.IsKeyMissing
  nameWithType: KeyUtility.IsKeyMissing
- uid: CG.Business.Repositories.KeyUtility.IsKeyMissing``1(``0)
  name: IsKeyMissing<TKey>(TKey)
  href: api/CG.Business.Repositories.KeyUtility.html#CG_Business_Repositories_KeyUtility_IsKeyMissing__1___0_
  commentId: M:CG.Business.Repositories.KeyUtility.IsKeyMissing``1(``0)
  name.vb: IsKeyMissing(Of TKey)(TKey)
  fullName: CG.Business.Repositories.KeyUtility.IsKeyMissing<TKey>(TKey)
  fullName.vb: CG.Business.Repositories.KeyUtility.IsKeyMissing(Of TKey)(TKey)
  nameWithType: KeyUtility.IsKeyMissing<TKey>(TKey)
  nameWithType.vb: KeyUtility.IsKeyMissing(Of TKey)(TKey)
- uid: CG.Business.Repositories.LinqRepositoryBase`2
  name: LinqRepositoryBase<TOptions, TModel>
  href: api/CG.Business.Repositories.LinqRepositoryBase-2.html
  commentId: T:CG.Business.Repositories.LinqRepositoryBase`2
  name.vb: LinqRepositoryBase(Of TOptions, TModel)
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel)
  nameWithType: LinqRepositoryBase<TOptions, TModel>
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel)
- uid: CG.Business.Repositories.LinqRepositoryBase`2.#ctor(`0)
  name: LinqRepositoryBase(TOptions)
  href: api/CG.Business.Repositories.LinqRepositoryBase-2.html#CG_Business_Repositories_LinqRepositoryBase_2__ctor__0_
  commentId: M:CG.Business.Repositories.LinqRepositoryBase`2.#ctor(`0)
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.LinqRepositoryBase(TOptions)
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel).LinqRepositoryBase(TOptions)
  nameWithType: LinqRepositoryBase<TOptions, TModel>.LinqRepositoryBase(TOptions)
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel).LinqRepositoryBase(TOptions)
- uid: CG.Business.Repositories.LinqRepositoryBase`2.#ctor*
  name: LinqRepositoryBase
  href: api/CG.Business.Repositories.LinqRepositoryBase-2.html#CG_Business_Repositories_LinqRepositoryBase_2__ctor_
  commentId: Overload:CG.Business.Repositories.LinqRepositoryBase`2.#ctor
  isSpec: "True"
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.LinqRepositoryBase
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel).LinqRepositoryBase
  nameWithType: LinqRepositoryBase<TOptions, TModel>.LinqRepositoryBase
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel).LinqRepositoryBase
- uid: CG.Business.Repositories.LinqRepositoryBase`2.AsQueryable
  name: AsQueryable()
  href: api/CG.Business.Repositories.LinqRepositoryBase-2.html#CG_Business_Repositories_LinqRepositoryBase_2_AsQueryable
  commentId: M:CG.Business.Repositories.LinqRepositoryBase`2.AsQueryable
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable()
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel).AsQueryable()
  nameWithType: LinqRepositoryBase<TOptions, TModel>.AsQueryable()
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel).AsQueryable()
- uid: CG.Business.Repositories.LinqRepositoryBase`2.AsQueryable*
  name: AsQueryable
  href: api/CG.Business.Repositories.LinqRepositoryBase-2.html#CG_Business_Repositories_LinqRepositoryBase_2_AsQueryable_
  commentId: Overload:CG.Business.Repositories.LinqRepositoryBase`2.AsQueryable
  isSpec: "True"
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel>.AsQueryable
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel).AsQueryable
  nameWithType: LinqRepositoryBase<TOptions, TModel>.AsQueryable
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel).AsQueryable
- uid: CG.Business.Repositories.LinqRepositoryBase`3
  name: LinqRepositoryBase<TOptions, TModel, TKey>
  href: api/CG.Business.Repositories.LinqRepositoryBase-3.html
  commentId: T:CG.Business.Repositories.LinqRepositoryBase`3
  name.vb: LinqRepositoryBase(Of TOptions, TModel, TKey)
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey>
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey)
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey>
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey)
- uid: CG.Business.Repositories.LinqRepositoryBase`3.#ctor(`0)
  name: LinqRepositoryBase(TOptions)
  href: api/CG.Business.Repositories.LinqRepositoryBase-3.html#CG_Business_Repositories_LinqRepositoryBase_3__ctor__0_
  commentId: M:CG.Business.Repositories.LinqRepositoryBase`3.#ctor(`0)
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey>.LinqRepositoryBase(TOptions)
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey).LinqRepositoryBase(TOptions)
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey>.LinqRepositoryBase(TOptions)
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey).LinqRepositoryBase(TOptions)
- uid: CG.Business.Repositories.LinqRepositoryBase`3.#ctor*
  name: LinqRepositoryBase
  href: api/CG.Business.Repositories.LinqRepositoryBase-3.html#CG_Business_Repositories_LinqRepositoryBase_3__ctor_
  commentId: Overload:CG.Business.Repositories.LinqRepositoryBase`3.#ctor
  isSpec: "True"
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey>.LinqRepositoryBase
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey).LinqRepositoryBase
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey>.LinqRepositoryBase
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey).LinqRepositoryBase
- uid: CG.Business.Repositories.LinqRepositoryBase`4
  name: LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>
  href: api/CG.Business.Repositories.LinqRepositoryBase-4.html
  commentId: T:CG.Business.Repositories.LinqRepositoryBase`4
  name.vb: LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2)
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2)
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2)
- uid: CG.Business.Repositories.LinqRepositoryBase`4.#ctor(`0)
  name: LinqRepositoryBase(TOptions)
  href: api/CG.Business.Repositories.LinqRepositoryBase-4.html#CG_Business_Repositories_LinqRepositoryBase_4__ctor__0_
  commentId: M:CG.Business.Repositories.LinqRepositoryBase`4.#ctor(`0)
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>.LinqRepositoryBase(TOptions)
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2).LinqRepositoryBase(TOptions)
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>.LinqRepositoryBase(TOptions)
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2).LinqRepositoryBase(TOptions)
- uid: CG.Business.Repositories.LinqRepositoryBase`4.#ctor*
  name: LinqRepositoryBase
  href: api/CG.Business.Repositories.LinqRepositoryBase-4.html#CG_Business_Repositories_LinqRepositoryBase_4__ctor_
  commentId: Overload:CG.Business.Repositories.LinqRepositoryBase`4.#ctor
  isSpec: "True"
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>.LinqRepositoryBase
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2).LinqRepositoryBase
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>.LinqRepositoryBase
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2).LinqRepositoryBase
- uid: CG.Business.Repositories.LinqRepositoryBase`5
  name: LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>
  href: api/CG.Business.Repositories.LinqRepositoryBase-5.html
  commentId: T:CG.Business.Repositories.LinqRepositoryBase`5
  name.vb: LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3)
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3)
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3)
- uid: CG.Business.Repositories.LinqRepositoryBase`5.#ctor(`0)
  name: LinqRepositoryBase(TOptions)
  href: api/CG.Business.Repositories.LinqRepositoryBase-5.html#CG_Business_Repositories_LinqRepositoryBase_5__ctor__0_
  commentId: M:CG.Business.Repositories.LinqRepositoryBase`5.#ctor(`0)
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.LinqRepositoryBase(TOptions)
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).LinqRepositoryBase(TOptions)
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.LinqRepositoryBase(TOptions)
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).LinqRepositoryBase(TOptions)
- uid: CG.Business.Repositories.LinqRepositoryBase`5.#ctor*
  name: LinqRepositoryBase
  href: api/CG.Business.Repositories.LinqRepositoryBase-5.html#CG_Business_Repositories_LinqRepositoryBase_5__ctor_
  commentId: Overload:CG.Business.Repositories.LinqRepositoryBase`5.#ctor
  isSpec: "True"
  fullName: CG.Business.Repositories.LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.LinqRepositoryBase
  fullName.vb: CG.Business.Repositories.LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).LinqRepositoryBase
  nameWithType: LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>.LinqRepositoryBase
  nameWithType.vb: LinqRepositoryBase(Of TOptions, TModel, TKey1, TKey2, TKey3).LinqRepositoryBase
- uid: CG.Business.Repositories.Options
  name: CG.Business.Repositories.Options
  href: api/CG.Business.Repositories.Options.html
  commentId: N:CG.Business.Repositories.Options
  fullName: CG.Business.Repositories.Options
  nameWithType: CG.Business.Repositories.Options
- uid: CG.Business.Repositories.Options.LinqRepositoryOptions
  name: LinqRepositoryOptions
  href: api/CG.Business.Repositories.Options.LinqRepositoryOptions.html
  commentId: T:CG.Business.Repositories.Options.LinqRepositoryOptions
  fullName: CG.Business.Repositories.Options.LinqRepositoryOptions
  nameWithType: LinqRepositoryOptions
- uid: CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString
  name: ConnectionString
  href: api/CG.Business.Repositories.Options.LinqRepositoryOptions.html#CG_Business_Repositories_Options_LinqRepositoryOptions_ConnectionString
  commentId: P:CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString
  fullName: CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString
  nameWithType: LinqRepositoryOptions.ConnectionString
- uid: CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString*
  name: ConnectionString
  href: api/CG.Business.Repositories.Options.LinqRepositoryOptions.html#CG_Business_Repositories_Options_LinqRepositoryOptions_ConnectionString_
  commentId: Overload:CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString
  isSpec: "True"
  fullName: CG.Business.Repositories.Options.LinqRepositoryOptions.ConnectionString
  nameWithType: LinqRepositoryOptions.ConnectionString
- uid: CG.Business.Stores
  name: CG.Business.Stores
  href: api/CG.Business.Stores.html
  commentId: N:CG.Business.Stores
  fullName: CG.Business.Stores
  nameWithType: CG.Business.Stores
- uid: CG.Business.Stores.CrudStoreBase`3
  name: CrudStoreBase<TModel, TKey, TRepository>
  href: api/CG.Business.Stores.CrudStoreBase-3.html
  commentId: T:CG.Business.Stores.CrudStoreBase`3
  name.vb: CrudStoreBase(Of TModel, TKey, TRepository)
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository)
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository)
- uid: CG.Business.Stores.CrudStoreBase`3.#ctor(`2)
  name: CrudStoreBase(TRepository)
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3__ctor__2_
  commentId: M:CG.Business.Stores.CrudStoreBase`3.#ctor(`2)
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.CrudStoreBase(TRepository)
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).CrudStoreBase(TRepository)
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.CrudStoreBase(TRepository)
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).CrudStoreBase(TRepository)
- uid: CG.Business.Stores.CrudStoreBase`3.#ctor*
  name: CrudStoreBase
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3__ctor_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`3.#ctor
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.CrudStoreBase
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).CrudStoreBase
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.CrudStoreBase
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).CrudStoreBase
- uid: CG.Business.Stores.CrudStoreBase`3.AddAsync(`0,System.Threading.CancellationToken)
  name: AddAsync(TModel, CancellationToken)
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_AddAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Stores.CrudStoreBase`3.AddAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.AddAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).AddAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.AddAsync(TModel, CancellationToken)
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).AddAsync(TModel, CancellationToken)
- uid: CG.Business.Stores.CrudStoreBase`3.AddAsync*
  name: AddAsync
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_AddAsync_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`3.AddAsync
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.AddAsync
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).AddAsync
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.AddAsync
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).AddAsync
- uid: CG.Business.Stores.CrudStoreBase`3.AsQueryable
  name: AsQueryable()
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_AsQueryable
  commentId: M:CG.Business.Stores.CrudStoreBase`3.AsQueryable
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.AsQueryable()
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).AsQueryable()
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.AsQueryable()
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).AsQueryable()
- uid: CG.Business.Stores.CrudStoreBase`3.AsQueryable*
  name: AsQueryable
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_AsQueryable_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`3.AsQueryable
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.AsQueryable
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).AsQueryable
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.AsQueryable
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).AsQueryable
- uid: CG.Business.Stores.CrudStoreBase`3.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TModel, CancellationToken)
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Stores.CrudStoreBase`3.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.DeleteAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).DeleteAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.DeleteAsync(TModel, CancellationToken)
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).DeleteAsync(TModel, CancellationToken)
- uid: CG.Business.Stores.CrudStoreBase`3.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_DeleteAsync_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`3.DeleteAsync
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.DeleteAsync
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).DeleteAsync
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.DeleteAsync
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).DeleteAsync
- uid: CG.Business.Stores.CrudStoreBase`3.Dispose(System.Boolean)
  name: Dispose(Boolean)
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_Dispose_System_Boolean_
  commentId: M:CG.Business.Stores.CrudStoreBase`3.Dispose(System.Boolean)
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.Dispose(System.Boolean)
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).Dispose(System.Boolean)
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.Dispose(Boolean)
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).Dispose(Boolean)
- uid: CG.Business.Stores.CrudStoreBase`3.Dispose*
  name: Dispose
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_Dispose_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`3.Dispose
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.Dispose
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).Dispose
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.Dispose
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).Dispose
- uid: CG.Business.Stores.CrudStoreBase`3.Repository
  name: Repository
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_Repository
  commentId: P:CG.Business.Stores.CrudStoreBase`3.Repository
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.Repository
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).Repository
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.Repository
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).Repository
- uid: CG.Business.Stores.CrudStoreBase`3.Repository*
  name: Repository
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_Repository_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`3.Repository
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.Repository
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).Repository
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.Repository
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).Repository
- uid: CG.Business.Stores.CrudStoreBase`3.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TModel, CancellationToken)
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_UpdateAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Stores.CrudStoreBase`3.UpdateAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.UpdateAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).UpdateAsync(TModel, System.Threading.CancellationToken)
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.UpdateAsync(TModel, CancellationToken)
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).UpdateAsync(TModel, CancellationToken)
- uid: CG.Business.Stores.CrudStoreBase`3.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Business.Stores.CrudStoreBase-3.html#CG_Business_Stores_CrudStoreBase_3_UpdateAsync_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`3.UpdateAsync
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TModel, TKey, TRepository>.UpdateAsync
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TModel, TKey, TRepository).UpdateAsync
  nameWithType: CrudStoreBase<TModel, TKey, TRepository>.UpdateAsync
  nameWithType.vb: CrudStoreBase(Of TModel, TKey, TRepository).UpdateAsync
- uid: CG.Business.Stores.CrudStoreBase`4
  name: CrudStoreBase<TOptions, TModel, TKey, TRepository>
  href: api/CG.Business.Stores.CrudStoreBase-4.html
  commentId: T:CG.Business.Stores.CrudStoreBase`4
  name.vb: CrudStoreBase(Of TOptions, TModel, TKey, TRepository)
  fullName: CG.Business.Stores.CrudStoreBase<TOptions, TModel, TKey, TRepository>
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TOptions, TModel, TKey, TRepository)
  nameWithType: CrudStoreBase<TOptions, TModel, TKey, TRepository>
  nameWithType.vb: CrudStoreBase(Of TOptions, TModel, TKey, TRepository)
- uid: CG.Business.Stores.CrudStoreBase`4.#ctor(`0,`3)
  name: CrudStoreBase(TOptions, TRepository)
  href: api/CG.Business.Stores.CrudStoreBase-4.html#CG_Business_Stores_CrudStoreBase_4__ctor__0__3_
  commentId: M:CG.Business.Stores.CrudStoreBase`4.#ctor(`0,`3)
  fullName: CG.Business.Stores.CrudStoreBase<TOptions, TModel, TKey, TRepository>.CrudStoreBase(TOptions, TRepository)
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TOptions, TModel, TKey, TRepository).CrudStoreBase(TOptions, TRepository)
  nameWithType: CrudStoreBase<TOptions, TModel, TKey, TRepository>.CrudStoreBase(TOptions, TRepository)
  nameWithType.vb: CrudStoreBase(Of TOptions, TModel, TKey, TRepository).CrudStoreBase(TOptions, TRepository)
- uid: CG.Business.Stores.CrudStoreBase`4.#ctor*
  name: CrudStoreBase
  href: api/CG.Business.Stores.CrudStoreBase-4.html#CG_Business_Stores_CrudStoreBase_4__ctor_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`4.#ctor
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TOptions, TModel, TKey, TRepository>.CrudStoreBase
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TOptions, TModel, TKey, TRepository).CrudStoreBase
  nameWithType: CrudStoreBase<TOptions, TModel, TKey, TRepository>.CrudStoreBase
  nameWithType.vb: CrudStoreBase(Of TOptions, TModel, TKey, TRepository).CrudStoreBase
- uid: CG.Business.Stores.CrudStoreBase`4.Options
  name: Options
  href: api/CG.Business.Stores.CrudStoreBase-4.html#CG_Business_Stores_CrudStoreBase_4_Options
  commentId: P:CG.Business.Stores.CrudStoreBase`4.Options
  fullName: CG.Business.Stores.CrudStoreBase<TOptions, TModel, TKey, TRepository>.Options
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TOptions, TModel, TKey, TRepository).Options
  nameWithType: CrudStoreBase<TOptions, TModel, TKey, TRepository>.Options
  nameWithType.vb: CrudStoreBase(Of TOptions, TModel, TKey, TRepository).Options
- uid: CG.Business.Stores.CrudStoreBase`4.Options*
  name: Options
  href: api/CG.Business.Stores.CrudStoreBase-4.html#CG_Business_Stores_CrudStoreBase_4_Options_
  commentId: Overload:CG.Business.Stores.CrudStoreBase`4.Options
  isSpec: "True"
  fullName: CG.Business.Stores.CrudStoreBase<TOptions, TModel, TKey, TRepository>.Options
  fullName.vb: CG.Business.Stores.CrudStoreBase(Of TOptions, TModel, TKey, TRepository).Options
  nameWithType: CrudStoreBase<TOptions, TModel, TKey, TRepository>.Options
  nameWithType.vb: CrudStoreBase(Of TOptions, TModel, TKey, TRepository).Options
- uid: CG.Business.Stores.ICrudStore`2
  name: ICrudStore<TModel, TKey>
  href: api/CG.Business.Stores.ICrudStore-2.html
  commentId: T:CG.Business.Stores.ICrudStore`2
  name.vb: ICrudStore(Of TModel, TKey)
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey)
  nameWithType: ICrudStore<TModel, TKey>
  nameWithType.vb: ICrudStore(Of TModel, TKey)
- uid: CG.Business.Stores.ICrudStore`2.AddAsync(`0,System.Threading.CancellationToken)
  name: AddAsync(TModel, CancellationToken)
  href: api/CG.Business.Stores.ICrudStore-2.html#CG_Business_Stores_ICrudStore_2_AddAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Stores.ICrudStore`2.AddAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>.AddAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey).AddAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudStore<TModel, TKey>.AddAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudStore(Of TModel, TKey).AddAsync(TModel, CancellationToken)
- uid: CG.Business.Stores.ICrudStore`2.AddAsync*
  name: AddAsync
  href: api/CG.Business.Stores.ICrudStore-2.html#CG_Business_Stores_ICrudStore_2_AddAsync_
  commentId: Overload:CG.Business.Stores.ICrudStore`2.AddAsync
  isSpec: "True"
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>.AddAsync
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey).AddAsync
  nameWithType: ICrudStore<TModel, TKey>.AddAsync
  nameWithType.vb: ICrudStore(Of TModel, TKey).AddAsync
- uid: CG.Business.Stores.ICrudStore`2.AsQueryable
  name: AsQueryable()
  href: api/CG.Business.Stores.ICrudStore-2.html#CG_Business_Stores_ICrudStore_2_AsQueryable
  commentId: M:CG.Business.Stores.ICrudStore`2.AsQueryable
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>.AsQueryable()
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey).AsQueryable()
  nameWithType: ICrudStore<TModel, TKey>.AsQueryable()
  nameWithType.vb: ICrudStore(Of TModel, TKey).AsQueryable()
- uid: CG.Business.Stores.ICrudStore`2.AsQueryable*
  name: AsQueryable
  href: api/CG.Business.Stores.ICrudStore-2.html#CG_Business_Stores_ICrudStore_2_AsQueryable_
  commentId: Overload:CG.Business.Stores.ICrudStore`2.AsQueryable
  isSpec: "True"
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>.AsQueryable
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey).AsQueryable
  nameWithType: ICrudStore<TModel, TKey>.AsQueryable
  nameWithType.vb: ICrudStore(Of TModel, TKey).AsQueryable
- uid: CG.Business.Stores.ICrudStore`2.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TModel, CancellationToken)
  href: api/CG.Business.Stores.ICrudStore-2.html#CG_Business_Stores_ICrudStore_2_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Stores.ICrudStore`2.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>.DeleteAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey).DeleteAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudStore<TModel, TKey>.DeleteAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudStore(Of TModel, TKey).DeleteAsync(TModel, CancellationToken)
- uid: CG.Business.Stores.ICrudStore`2.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Business.Stores.ICrudStore-2.html#CG_Business_Stores_ICrudStore_2_DeleteAsync_
  commentId: Overload:CG.Business.Stores.ICrudStore`2.DeleteAsync
  isSpec: "True"
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>.DeleteAsync
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey).DeleteAsync
  nameWithType: ICrudStore<TModel, TKey>.DeleteAsync
  nameWithType.vb: ICrudStore(Of TModel, TKey).DeleteAsync
- uid: CG.Business.Stores.ICrudStore`2.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TModel, CancellationToken)
  href: api/CG.Business.Stores.ICrudStore-2.html#CG_Business_Stores_ICrudStore_2_UpdateAsync__0_System_Threading_CancellationToken_
  commentId: M:CG.Business.Stores.ICrudStore`2.UpdateAsync(`0,System.Threading.CancellationToken)
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>.UpdateAsync(TModel, System.Threading.CancellationToken)
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey).UpdateAsync(TModel, System.Threading.CancellationToken)
  nameWithType: ICrudStore<TModel, TKey>.UpdateAsync(TModel, CancellationToken)
  nameWithType.vb: ICrudStore(Of TModel, TKey).UpdateAsync(TModel, CancellationToken)
- uid: CG.Business.Stores.ICrudStore`2.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Business.Stores.ICrudStore-2.html#CG_Business_Stores_ICrudStore_2_UpdateAsync_
  commentId: Overload:CG.Business.Stores.ICrudStore`2.UpdateAsync
  isSpec: "True"
  fullName: CG.Business.Stores.ICrudStore<TModel, TKey>.UpdateAsync
  fullName.vb: CG.Business.Stores.ICrudStore(Of TModel, TKey).UpdateAsync
  nameWithType: ICrudStore<TModel, TKey>.UpdateAsync
  nameWithType.vb: ICrudStore(Of TModel, TKey).UpdateAsync
- uid: CG.Collections.Generic
  name: CG.Collections.Generic
  href: api/CG.Collections.Generic.html
  commentId: N:CG.Collections.Generic
  fullName: CG.Collections.Generic
  nameWithType: CG.Collections.Generic
- uid: CG.Collections.Generic.EnumerableExtensions
  name: EnumerableExtensions
  href: api/CG.Collections.Generic.EnumerableExtensions.html
  commentId: T:CG.Collections.Generic.EnumerableExtensions
  fullName: CG.Collections.Generic.EnumerableExtensions
  nameWithType: EnumerableExtensions
- uid: CG.Collections.Generic.EnumerableExtensions.AlternateElements*
  name: AlternateElements
  href: api/CG.Collections.Generic.EnumerableExtensions.html#CG_Collections_Generic_EnumerableExtensions_AlternateElements_
  commentId: Overload:CG.Collections.Generic.EnumerableExtensions.AlternateElements
  isSpec: "True"
  fullName: CG.Collections.Generic.EnumerableExtensions.AlternateElements
  nameWithType: EnumerableExtensions.AlternateElements
- uid: CG.Collections.Generic.EnumerableExtensions.AlternateElements``1(System.Collections.Generic.IEnumerable{``0})
  name: AlternateElements<T>(IEnumerable<T>)
  href: api/CG.Collections.Generic.EnumerableExtensions.html#CG_Collections_Generic_EnumerableExtensions_AlternateElements__1_System_Collections_Generic_IEnumerable___0__
  commentId: M:CG.Collections.Generic.EnumerableExtensions.AlternateElements``1(System.Collections.Generic.IEnumerable{``0})
  name.vb: AlternateElements(Of T)(IEnumerable(Of T))
  fullName: CG.Collections.Generic.EnumerableExtensions.AlternateElements<T>(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: CG.Collections.Generic.EnumerableExtensions.AlternateElements(Of T)(System.Collections.Generic.IEnumerable(Of T))
  nameWithType: EnumerableExtensions.AlternateElements<T>(IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.AlternateElements(Of T)(IEnumerable(Of T))
- uid: CG.Collections.Generic.EnumerableExtensions.Batch*
  name: Batch
  href: api/CG.Collections.Generic.EnumerableExtensions.html#CG_Collections_Generic_EnumerableExtensions_Batch_
  commentId: Overload:CG.Collections.Generic.EnumerableExtensions.Batch
  isSpec: "True"
  fullName: CG.Collections.Generic.EnumerableExtensions.Batch
  nameWithType: EnumerableExtensions.Batch
- uid: CG.Collections.Generic.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: Batch<T>(IEnumerable<T>, Int32)
  href: api/CG.Collections.Generic.EnumerableExtensions.html#CG_Collections_Generic_EnumerableExtensions_Batch__1_System_Collections_Generic_IEnumerable___0__System_Int32_
  commentId: M:CG.Collections.Generic.EnumerableExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name.vb: Batch(Of T)(IEnumerable(Of T), Int32)
  fullName: CG.Collections.Generic.EnumerableExtensions.Batch<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  fullName.vb: CG.Collections.Generic.EnumerableExtensions.Batch(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  nameWithType: EnumerableExtensions.Batch<T>(IEnumerable<T>, Int32)
  nameWithType.vb: EnumerableExtensions.Batch(Of T)(IEnumerable(Of T), Int32)
- uid: CG.Collections.Generic.EnumerableExtensions.DistinctOn*
  name: DistinctOn
  href: api/CG.Collections.Generic.EnumerableExtensions.html#CG_Collections_Generic_EnumerableExtensions_DistinctOn_
  commentId: Overload:CG.Collections.Generic.EnumerableExtensions.DistinctOn
  isSpec: "True"
  fullName: CG.Collections.Generic.EnumerableExtensions.DistinctOn
  nameWithType: EnumerableExtensions.DistinctOn
- uid: CG.Collections.Generic.EnumerableExtensions.DistinctOn``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: DistinctOn<T, K>(IEnumerable<T>, Func<T, K>)
  href: api/CG.Collections.Generic.EnumerableExtensions.html#CG_Collections_Generic_EnumerableExtensions_DistinctOn__2_System_Collections_Generic_IEnumerable___0__System_Func___0___1__
  commentId: M:CG.Collections.Generic.EnumerableExtensions.DistinctOn``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name.vb: DistinctOn(Of T, K)(IEnumerable(Of T), Func(Of T, K))
  fullName: CG.Collections.Generic.EnumerableExtensions.DistinctOn<T, K>(System.Collections.Generic.IEnumerable<T>, System.Func<T, K>)
  fullName.vb: CG.Collections.Generic.EnumerableExtensions.DistinctOn(Of T, K)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, K))
  nameWithType: EnumerableExtensions.DistinctOn<T, K>(IEnumerable<T>, Func<T, K>)
  nameWithType.vb: EnumerableExtensions.DistinctOn(Of T, K)(IEnumerable(Of T), Func(Of T, K))
- uid: CG.Collections.Generic.EnumerableExtensions.SelectManyR*
  name: SelectManyR
  href: api/CG.Collections.Generic.EnumerableExtensions.html#CG_Collections_Generic_EnumerableExtensions_SelectManyR_
  commentId: Overload:CG.Collections.Generic.EnumerableExtensions.SelectManyR
  isSpec: "True"
  fullName: CG.Collections.Generic.EnumerableExtensions.SelectManyR
  nameWithType: EnumerableExtensions.SelectManyR
- uid: CG.Collections.Generic.EnumerableExtensions.SelectManyR``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  name: SelectManyR<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  href: api/CG.Collections.Generic.EnumerableExtensions.html#CG_Collections_Generic_EnumerableExtensions_SelectManyR__1_System_Collections_Generic_IEnumerable___0__System_Func___0_System_Collections_Generic_IEnumerable___0___
  commentId: M:CG.Collections.Generic.EnumerableExtensions.SelectManyR``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})
  name.vb: SelectManyR(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
  fullName: CG.Collections.Generic.EnumerableExtensions.SelectManyR<T>(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>>)
  fullName.vb: CG.Collections.Generic.EnumerableExtensions.SelectManyR(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T)))
  nameWithType: EnumerableExtensions.SelectManyR<T>(IEnumerable<T>, Func<T, IEnumerable<T>>)
  nameWithType.vb: EnumerableExtensions.SelectManyR(Of T)(IEnumerable(Of T), Func(Of T, IEnumerable(Of T)))
- uid: CG.Linq
  name: CG.Linq
  href: api/CG.Linq.html
  commentId: N:CG.Linq
  fullName: CG.Linq
  nameWithType: CG.Linq
- uid: CG.Linq.Criteria`1
  name: Criteria<TEntity>
  href: api/CG.Linq.Criteria-1.html
  commentId: T:CG.Linq.Criteria`1
  name.vb: Criteria(Of TEntity)
  fullName: CG.Linq.Criteria<TEntity>
  fullName.vb: CG.Linq.Criteria(Of TEntity)
  nameWithType: Criteria<TEntity>
  nameWithType.vb: Criteria(Of TEntity)
- uid: CG.Linq.Criteria`1.AddCriteria(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: AddCriteria(Expression<Func<TEntity, Boolean>>)
  href: api/CG.Linq.Criteria-1.html#CG_Linq_Criteria_1_AddCriteria_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  commentId: M:CG.Linq.Criteria`1.AddCriteria(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name.vb: AddCriteria(Expression(Of Func(Of TEntity, Boolean)))
  fullName: CG.Linq.Criteria<TEntity>.AddCriteria(System.Linq.Expressions.Expression<System.Func<TEntity, System.Boolean>>)
  fullName.vb: CG.Linq.Criteria(Of TEntity).AddCriteria(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Boolean)))
  nameWithType: Criteria<TEntity>.AddCriteria(Expression<Func<TEntity, Boolean>>)
  nameWithType.vb: Criteria(Of TEntity).AddCriteria(Expression(Of Func(Of TEntity, Boolean)))
- uid: CG.Linq.Criteria`1.AddCriteria*
  name: AddCriteria
  href: api/CG.Linq.Criteria-1.html#CG_Linq_Criteria_1_AddCriteria_
  commentId: Overload:CG.Linq.Criteria`1.AddCriteria
  isSpec: "True"
  fullName: CG.Linq.Criteria<TEntity>.AddCriteria
  fullName.vb: CG.Linq.Criteria(Of TEntity).AddCriteria
  nameWithType: Criteria<TEntity>.AddCriteria
  nameWithType.vb: Criteria(Of TEntity).AddCriteria
- uid: CG.Linq.Criteria`1.And(CG.Linq.Criteria{`0})
  name: And(Criteria<TEntity>)
  href: api/CG.Linq.Criteria-1.html#CG_Linq_Criteria_1_And_CG_Linq_Criteria__0__
  commentId: M:CG.Linq.Criteria`1.And(CG.Linq.Criteria{`0})
  name.vb: And(Criteria(Of TEntity))
  fullName: CG.Linq.Criteria<TEntity>.And(CG.Linq.Criteria<TEntity>)
  fullName.vb: CG.Linq.Criteria(Of TEntity).And(CG.Linq.Criteria(Of TEntity))
  nameWithType: Criteria<TEntity>.And(Criteria<TEntity>)
  nameWithType.vb: Criteria(Of TEntity).And(Criteria(Of TEntity))
- uid: CG.Linq.Criteria`1.And*
  name: And
  href: api/CG.Linq.Criteria-1.html#CG_Linq_Criteria_1_And_
  commentId: Overload:CG.Linq.Criteria`1.And
  isSpec: "True"
  fullName: CG.Linq.Criteria<TEntity>.And
  fullName.vb: CG.Linq.Criteria(Of TEntity).And
  nameWithType: Criteria<TEntity>.And
  nameWithType.vb: Criteria(Of TEntity).And
- uid: CG.Linq.Criteria`1.AsExpression
  name: AsExpression()
  href: api/CG.Linq.Criteria-1.html#CG_Linq_Criteria_1_AsExpression
  commentId: M:CG.Linq.Criteria`1.AsExpression
  fullName: CG.Linq.Criteria<TEntity>.AsExpression()
  fullName.vb: CG.Linq.Criteria(Of TEntity).AsExpression()
  nameWithType: Criteria<TEntity>.AsExpression()
  nameWithType.vb: Criteria(Of TEntity).AsExpression()
- uid: CG.Linq.Criteria`1.AsExpression*
  name: AsExpression
  href: api/CG.Linq.Criteria-1.html#CG_Linq_Criteria_1_AsExpression_
  commentId: Overload:CG.Linq.Criteria`1.AsExpression
  isSpec: "True"
  fullName: CG.Linq.Criteria<TEntity>.AsExpression
  fullName.vb: CG.Linq.Criteria(Of TEntity).AsExpression
  nameWithType: Criteria<TEntity>.AsExpression
  nameWithType.vb: Criteria(Of TEntity).AsExpression
- uid: CG.Linq.Criteria`1.Or(CG.Linq.Criteria{`0})
  name: Or(Criteria<TEntity>)
  href: api/CG.Linq.Criteria-1.html#CG_Linq_Criteria_1_Or_CG_Linq_Criteria__0__
  commentId: M:CG.Linq.Criteria`1.Or(CG.Linq.Criteria{`0})
  name.vb: Or(Criteria(Of TEntity))
  fullName: CG.Linq.Criteria<TEntity>.Or(CG.Linq.Criteria<TEntity>)
  fullName.vb: CG.Linq.Criteria(Of TEntity).Or(CG.Linq.Criteria(Of TEntity))
  nameWithType: Criteria<TEntity>.Or(Criteria<TEntity>)
  nameWithType.vb: Criteria(Of TEntity).Or(Criteria(Of TEntity))
- uid: CG.Linq.Criteria`1.Or*
  name: Or
  href: api/CG.Linq.Criteria-1.html#CG_Linq_Criteria_1_Or_
  commentId: Overload:CG.Linq.Criteria`1.Or
  isSpec: "True"
  fullName: CG.Linq.Criteria<TEntity>.Or
  fullName.vb: CG.Linq.Criteria(Of TEntity).Or
  nameWithType: Criteria<TEntity>.Or
  nameWithType.vb: Criteria(Of TEntity).Or
- uid: CG.Linq.ExpressionExtensions
  name: ExpressionExtensions
  href: api/CG.Linq.ExpressionExtensions.html
  commentId: T:CG.Linq.ExpressionExtensions
  fullName: CG.Linq.ExpressionExtensions
  nameWithType: ExpressionExtensions
- uid: CG.Linq.ExpressionExtensions.AndAlso*
  name: AndAlso
  href: api/CG.Linq.ExpressionExtensions.html#CG_Linq_ExpressionExtensions_AndAlso_
  commentId: Overload:CG.Linq.ExpressionExtensions.AndAlso
  isSpec: "True"
  fullName: CG.Linq.ExpressionExtensions.AndAlso
  nameWithType: ExpressionExtensions.AndAlso
- uid: CG.Linq.ExpressionExtensions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: AndAlso<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  href: api/CG.Linq.ExpressionExtensions.html#CG_Linq_ExpressionExtensions_AndAlso__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  commentId: M:CG.Linq.ExpressionExtensions.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: AndAlso(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  fullName: CG.Linq.ExpressionExtensions.AndAlso<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  fullName.vb: CG.Linq.ExpressionExtensions.AndAlso(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  nameWithType: ExpressionExtensions.AndAlso<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType.vb: ExpressionExtensions.AndAlso(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: CG.Linq.ExpressionExtensions.BinaryOnExpressions*
  name: BinaryOnExpressions
  href: api/CG.Linq.ExpressionExtensions.html#CG_Linq_ExpressionExtensions_BinaryOnExpressions_
  commentId: Overload:CG.Linq.ExpressionExtensions.BinaryOnExpressions
  isSpec: "True"
  fullName: CG.Linq.ExpressionExtensions.BinaryOnExpressions
  nameWithType: ExpressionExtensions.BinaryOnExpressions
- uid: CG.Linq.ExpressionExtensions.BinaryOnExpressions``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: BinaryOnExpressions<T>(Expression<Func<T, Boolean>>, ExpressionType, Expression<Func<T, Boolean>>)
  href: api/CG.Linq.ExpressionExtensions.html#CG_Linq_ExpressionExtensions_BinaryOnExpressions__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_ExpressionType_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  commentId: M:CG.Linq.ExpressionExtensions.BinaryOnExpressions``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: BinaryOnExpressions(Of T)(Expression(Of Func(Of T, Boolean)), ExpressionType, Expression(Of Func(Of T, Boolean)))
  fullName: CG.Linq.ExpressionExtensions.BinaryOnExpressions<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  fullName.vb: CG.Linq.ExpressionExtensions.BinaryOnExpressions(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  nameWithType: ExpressionExtensions.BinaryOnExpressions<T>(Expression<Func<T, Boolean>>, ExpressionType, Expression<Func<T, Boolean>>)
  nameWithType.vb: ExpressionExtensions.BinaryOnExpressions(Of T)(Expression(Of Func(Of T, Boolean)), ExpressionType, Expression(Of Func(Of T, Boolean)))
- uid: CG.Linq.ExpressionExtensions.OrElse*
  name: OrElse
  href: api/CG.Linq.ExpressionExtensions.html#CG_Linq_ExpressionExtensions_OrElse_
  commentId: Overload:CG.Linq.ExpressionExtensions.OrElse
  isSpec: "True"
  fullName: CG.Linq.ExpressionExtensions.OrElse
  nameWithType: ExpressionExtensions.OrElse
- uid: CG.Linq.ExpressionExtensions.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: OrElse<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  href: api/CG.Linq.ExpressionExtensions.html#CG_Linq_ExpressionExtensions_OrElse__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  commentId: M:CG.Linq.ExpressionExtensions.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: OrElse(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  fullName: CG.Linq.ExpressionExtensions.OrElse<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  fullName.vb: CG.Linq.ExpressionExtensions.OrElse(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  nameWithType: ExpressionExtensions.OrElse<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType.vb: ExpressionExtensions.OrElse(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: CG.Linq.ExpressionExtensions.RewriteType*
  name: RewriteType
  href: api/CG.Linq.ExpressionExtensions.html#CG_Linq_ExpressionExtensions_RewriteType_
  commentId: Overload:CG.Linq.ExpressionExtensions.RewriteType
  isSpec: "True"
  fullName: CG.Linq.ExpressionExtensions.RewriteType
  nameWithType: ExpressionExtensions.RewriteType
- uid: CG.Linq.ExpressionExtensions.RewriteType``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: RewriteType<TSource, TDest>(Expression<Func<TSource, Boolean>>)
  href: api/CG.Linq.ExpressionExtensions.html#CG_Linq_ExpressionExtensions_RewriteType__2_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  commentId: M:CG.Linq.ExpressionExtensions.RewriteType``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: RewriteType(Of TSource, TDest)(Expression(Of Func(Of TSource, Boolean)))
  fullName: CG.Linq.ExpressionExtensions.RewriteType<TSource, TDest>(System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  fullName.vb: CG.Linq.ExpressionExtensions.RewriteType(Of TSource, TDest)(System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  nameWithType: ExpressionExtensions.RewriteType<TSource, TDest>(Expression<Func<TSource, Boolean>>)
  nameWithType.vb: ExpressionExtensions.RewriteType(Of TSource, TDest)(Expression(Of Func(Of TSource, Boolean)))
- uid: CG.Linq.PredicateBuilder
  name: PredicateBuilder
  href: api/CG.Linq.PredicateBuilder.html
  commentId: T:CG.Linq.PredicateBuilder
  fullName: CG.Linq.PredicateBuilder
  nameWithType: PredicateBuilder
- uid: CG.Linq.PredicateBuilder.And*
  name: And
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_And_
  commentId: Overload:CG.Linq.PredicateBuilder.And
  isSpec: "True"
  fullName: CG.Linq.PredicateBuilder.And
  nameWithType: PredicateBuilder.And
- uid: CG.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: And<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_And__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  commentId: M:CG.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: And(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  fullName: CG.Linq.PredicateBuilder.And<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  fullName.vb: CG.Linq.PredicateBuilder.And(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  nameWithType: PredicateBuilder.And<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType.vb: PredicateBuilder.And(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: CG.Linq.PredicateBuilder.Create*
  name: Create
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_Create_
  commentId: Overload:CG.Linq.PredicateBuilder.Create
  isSpec: "True"
  fullName: CG.Linq.PredicateBuilder.Create
  nameWithType: PredicateBuilder.Create
- uid: CG.Linq.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Create<T>(Expression<Func<T, Boolean>>)
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_Create__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  commentId: M:CG.Linq.PredicateBuilder.Create``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: Create(Of T)(Expression(Of Func(Of T, Boolean)))
  fullName: CG.Linq.PredicateBuilder.Create<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  fullName.vb: CG.Linq.PredicateBuilder.Create(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  nameWithType: PredicateBuilder.Create<T>(Expression<Func<T, Boolean>>)
  nameWithType.vb: PredicateBuilder.Create(Of T)(Expression(Of Func(Of T, Boolean)))
- uid: CG.Linq.PredicateBuilder.False*
  name: "False"
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_False_
  commentId: Overload:CG.Linq.PredicateBuilder.False
  isSpec: "True"
  fullName: CG.Linq.PredicateBuilder.False
  nameWithType: PredicateBuilder.False
- uid: CG.Linq.PredicateBuilder.False``1
  name: False<T>()
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_False__1
  commentId: M:CG.Linq.PredicateBuilder.False``1
  name.vb: False(Of T)()
  fullName: CG.Linq.PredicateBuilder.False<T>()
  fullName.vb: CG.Linq.PredicateBuilder.False(Of T)()
  nameWithType: PredicateBuilder.False<T>()
  nameWithType.vb: PredicateBuilder.False(Of T)()
- uid: CG.Linq.PredicateBuilder.Not*
  name: Not
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_Not_
  commentId: Overload:CG.Linq.PredicateBuilder.Not
  isSpec: "True"
  fullName: CG.Linq.PredicateBuilder.Not
  nameWithType: PredicateBuilder.Not
- uid: CG.Linq.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Not<T>(Expression<Func<T, Boolean>>)
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_Not__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  commentId: M:CG.Linq.PredicateBuilder.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: Not(Of T)(Expression(Of Func(Of T, Boolean)))
  fullName: CG.Linq.PredicateBuilder.Not<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  fullName.vb: CG.Linq.PredicateBuilder.Not(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  nameWithType: PredicateBuilder.Not<T>(Expression<Func<T, Boolean>>)
  nameWithType.vb: PredicateBuilder.Not(Of T)(Expression(Of Func(Of T, Boolean)))
- uid: CG.Linq.PredicateBuilder.Or*
  name: Or
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_Or_
  commentId: Overload:CG.Linq.PredicateBuilder.Or
  isSpec: "True"
  fullName: CG.Linq.PredicateBuilder.Or
  nameWithType: PredicateBuilder.Or
- uid: CG.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Or<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_Or__1_System_Linq_Expressions_Expression_System_Func___0_System_Boolean___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  commentId: M:CG.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name.vb: Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
  fullName: CG.Linq.PredicateBuilder.Or<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  fullName.vb: CG.Linq.PredicateBuilder.Or(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  nameWithType: PredicateBuilder.Or<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>)
  nameWithType.vb: PredicateBuilder.Or(Of T)(Expression(Of Func(Of T, Boolean)), Expression(Of Func(Of T, Boolean)))
- uid: CG.Linq.PredicateBuilder.True*
  name: "True"
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_True_
  commentId: Overload:CG.Linq.PredicateBuilder.True
  isSpec: "True"
  fullName: CG.Linq.PredicateBuilder.True
  nameWithType: PredicateBuilder.True
- uid: CG.Linq.PredicateBuilder.True``1
  name: True<T>()
  href: api/CG.Linq.PredicateBuilder.html#CG_Linq_PredicateBuilder_True__1
  commentId: M:CG.Linq.PredicateBuilder.True``1
  name.vb: True(Of T)()
  fullName: CG.Linq.PredicateBuilder.True<T>()
  fullName.vb: CG.Linq.PredicateBuilder.True(Of T)()
  nameWithType: PredicateBuilder.True<T>()
  nameWithType.vb: PredicateBuilder.True(Of T)()
