{
  "api/CG.Collections.Generic.EnumerableExtensions.html": {
    "href": "api/CG.Collections.Generic.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions",
    "keywords": "Class EnumerableExtensions This class contains extension methods related to the System.Collections.Generic.IEnumerable<T> type. Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Collections.Generic Assembly : CG.Linq.dll Syntax public static class EnumerableExtensions Methods AlternateElements<T>(IEnumerable<T>) This method returns alternate elements of the specified enumerable sequence. Declaration public static IEnumerable<T> AlternateElements<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable sequence to use for the operation. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable sequence containing alternate elements of the original sequence. Type Parameters Name Description T The type of associated element. Batch<T>(IEnumerable<T>, Int32) This method creates a smaller batch of items from a larger enumerable sequence. Declaration public static IEnumerable<IEnumerable<T>> Batch<T>(this IEnumerable<T> sequence, int batchSize) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to use for the operation. System.Int32 batchSize The number of items to include in the batch. Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable <T>> An enumerable sequence of T items. Type Parameters Name Description T The type associated with the sequence. DistinctOn<T, K>(IEnumerable<T>, Func<T, K>) This method returns elements from a sequence that are distinct, on the specified property. Declaration public static IEnumerable<T> DistinctOn<T, K>(this IEnumerable<T> lhs, Func<T, K> rhs) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> lhs The left-hand queryable sequence. System.Func <T, K> rhs The right-hand LINQ expression to select a property. Returns Type Description System.Collections.Generic.IEnumerable <T> An System.Collections.Generic.IEnumerable<T> sequence. Type Parameters Name Description T The type associated with the sequences. K The type associated with the property. SelectManyR<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) This method recursively projects each element of a sequence into an System.Collections.Generic.IEnumerable<T> and flattens the resulting sequences into a single System.Collections.Generic.IEnumerable<T> . Declaration public static IEnumerable<T> SelectManyR<T>(this IEnumerable<T> sequence, Func<T, IEnumerable<T>> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to use for the operation. System.Func <T, System.Collections.Generic.IEnumerable <T>> selector The selector to apply for the operation. Returns Type Description System.Collections.Generic.IEnumerable <T> An System.Collections.Generic.IEnumerable<T> whose elements are the result of recursively invoking the one-to-many transform function on each element of the input sequence. Type Parameters Name Description T The type associated with the sequence."
  },
  "api/CG.Collections.Generic.html": {
    "href": "api/CG.Collections.Generic.html",
    "title": "Namespace CG.Collections.Generic",
    "keywords": "Namespace CG.Collections.Generic Classes EnumerableExtensions This class contains extension methods related to the System.Collections.Generic.IEnumerable<T> type."
  },
  "api/CG.Linq.Criteria-1.html": {
    "href": "api/CG.Linq.Criteria-1.html",
    "title": "Class Criteria<TEntity>",
    "keywords": "Class Criteria<TEntity> This class is a generic database query criteria. Inheritance System.Object Criteria<TEntity> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq Assembly : CG.Linq.dll Syntax public abstract class Criteria<TEntity> where TEntity : class Type Parameters Name Description TEntity The type of entity associated with the criteria. Methods AddCriteria(Expression<Func<TEntity, Boolean>>) This method will add an expression to the current criteria. Declaration protected void AddCriteria(Expression<Func<TEntity, bool>> nextExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> nextExpression The expression to add. And(Criteria<TEntity>) This method will chain criteria together using a logical AND. Declaration public Expression<Func<TEntity, bool>> And(Criteria<TEntity> otherCriteria) Parameters Type Name Description Criteria <TEntity> otherCriteria The criteria to chain to this one. Returns Type Description System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> The resulting expression. AsExpression() This method returns the specified Func as a LINQ expression. Declaration public Expression<Func<TEntity, bool>> AsExpression() Returns Type Description System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> An expression. Or(Criteria<TEntity>) This method will chain criteria together using a logical OR. Declaration public Expression<Func<TEntity, bool>> Or(Criteria<TEntity> otherCriteria) Parameters Type Name Description Criteria <TEntity> otherCriteria The criteria to chain to this one. Returns Type Description System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> The resulting expression."
  },
  "api/CG.Linq.ExpressionExtensions.html": {
    "href": "api/CG.Linq.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions",
    "keywords": "Class ExpressionExtensions This class provides extension methods related to the System.Linq.Expressions.Expression type. Inheritance System.Object ExpressionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq Assembly : CG.Linq.dll Syntax public static class ExpressionExtensions Methods AndAlso<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>) This method combines two expressions using a logical AND. Declaration public static Expression<Func<T, bool>> AndAlso<T>(this Expression<Func<T, bool>> left, Expression<Func<T, bool>> right) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> left The left hand side of the operation. System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> right The right hand side of the operation. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> An LINQ expression. Type Parameters Name Description T The type associated with the expressions. BinaryOnExpressions<T>(Expression<Func<T, Boolean>>, ExpressionType, Expression<Func<T, Boolean>>) This method converts the left and right hand expressions into a binary expression. Declaration public static Expression<Func<T, bool>> BinaryOnExpressions<T>(this Expression<Func<T, bool>> left, ExpressionType binaryType, Expression<Func<T, bool>> right) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> left The left hand side of the operation. System.Linq.Expressions.ExpressionType binaryType The type of binary operator to apply. System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> right The right hand side of the operation. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> An LINQ expression. Type Parameters Name Description T The type associated with the expressions. OrElse<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>) This method combines two expressions using a logical OR. Declaration public static Expression<Func<T, bool>> OrElse<T>(this Expression<Func<T, bool>> left, Expression<Func<T, bool>> right) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> left The left hand side of the operation. System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> right The right hand side of the operation. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> An LINQ expression. Type Parameters Name Description T The type associated with the expressions. RewriteType<TSource, TDest>(Expression<Func<TSource, Boolean>>) This method rewrites the specified LINQ expression to an identical one using another type. The expression itself doesn't change, just the referenced type. Declaration public static Expression<Func<TDest, bool>> RewriteType<TSource, TDest>(this Expression<Func<TSource, bool>> source) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSource, System.Boolean >> source The LINQ expression to be rewritten. Returns Type Description System.Linq.Expressions.Expression < System.Func <TDest, System.Boolean >> The rewritten LINQ expression. Type Parameters Name Description TSource The source type. TDest The destination type."
  },
  "api/CG.Linq.html": {
    "href": "api/CG.Linq.html",
    "title": "Namespace CG.Linq",
    "keywords": "Namespace CG.Linq Classes Criteria<TEntity> This class is a generic database query criteria. ExpressionExtensions This class provides extension methods related to the System.Linq.Expressions.Expression type. PredicateBuilder This class utility is a LINQ predicate builder."
  },
  "api/CG.Linq.PredicateBuilder.html": {
    "href": "api/CG.Linq.PredicateBuilder.html",
    "title": "Class PredicateBuilder",
    "keywords": "Class PredicateBuilder This class utility is a LINQ predicate builder. Inheritance System.Object PredicateBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq Assembly : CG.Linq.dll Syntax public static class PredicateBuilder Methods And<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>) Combines the first predicate with the second using the logical \"and\". Declaration public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> first System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> second Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T Create<T>(Expression<Func<T, Boolean>>) Creates a predicate expression from the specified lambda expression. Declaration public static Expression<Func<T, bool>> Create<T>(Expression<Func<T, bool>> predicate) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> predicate Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T False<T>() This method creates a predicate that evaluates to false. Declaration public static Expression<Func<T, bool>> False<T>() Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T Not<T>(Expression<Func<T, Boolean>>) Negates the predicate. Declaration public static Expression<Func<T, bool>> Not<T>(this Expression<Func<T, bool>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T Or<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>) Combines the first predicate with the second using the logical \"or\". Declaration public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> first System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> second Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T True<T>() This method creates a predicate that evaluates to true. Declaration public static Expression<Func<T, bool>> True<T>() Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Linq.dll contains LINQ extensions used by other CodeGator packages."
  }
}