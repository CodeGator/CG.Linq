{
  "api/CG.Business.Repositories.CrudRepositoryBase-3.html": {
    "href": "api/CG.Business.Repositories.CrudRepositoryBase-3.html",
    "title": "Class CrudRepositoryBase<TOptions, TModel, TKey>",
    "keywords": "Class CrudRepositoryBase<TOptions, TModel, TKey> This class is a base implementation of the ICrudRepository<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> LinqRepositoryBase <TOptions, TModel> LinqRepositoryBase <TOptions, TModel, TKey> CrudRepositoryBase<TOptions, TModel, TKey> Implements ICrudRepository <TModel, TKey> ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public abstract class CrudRepositoryBase<TOptions, TModel, TKey> : LinqRepositoryBase<TOptions, TModel, TKey>, ICrudRepository<TModel, TKey>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The model type associated with the repository. TKey The key type associated with the model. Constructors CrudRepositoryBase(TOptions) This constructor creates a new instance of the CrudRepositoryBase<TOptions, TModel, TKey> class. Declaration protected CrudRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the repository. Declaration public abstract Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the repository. Declaration public abstract Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the repository. Declaration public abstract Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object. Implements ICrudRepository<TModel, TKey> ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.CrudRepositoryBase-4.html": {
    "href": "api/CG.Business.Repositories.CrudRepositoryBase-4.html",
    "title": "Class CrudRepositoryBase<TOptions, TModel, TKey1, TKey2>",
    "keywords": "Class CrudRepositoryBase<TOptions, TModel, TKey1, TKey2> This class is a base implementation of the ICrudRepository<TModel, TKey1, TKey2> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> LinqRepositoryBase <TOptions, TModel> LinqRepositoryBase <TOptions, TModel, TKey1, TKey2> CrudRepositoryBase<TOptions, TModel, TKey1, TKey2> Implements ICrudRepository <TModel, TKey1, TKey2> ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public abstract class CrudRepositoryBase<TOptions, TModel, TKey1, TKey2> : LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>, ICrudRepository<TModel, TKey1, TKey2>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : class, IModel<TKey1, TKey2> where TKey1 : new() where TKey2 : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The model type associated with the repository. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. Constructors CrudRepositoryBase(TOptions) This constructor creates a new instance of the CrudRepositoryBase<TOptions, TModel, TKey1, TKey2> class. Declaration protected CrudRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the repository. Declaration public abstract Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the repository. Declaration public abstract Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the repository. Declaration public abstract Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object. Implements ICrudRepository<TModel, TKey1, TKey2> ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.CrudRepositoryBase-5.html": {
    "href": "api/CG.Business.Repositories.CrudRepositoryBase-5.html",
    "title": "Class CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>",
    "keywords": "Class CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> This class is a base implementation of the ICrudRepository<TModel, TKey1, TKey2, TKey3> interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> LinqRepositoryBase <TOptions, TModel> LinqRepositoryBase <TOptions, TModel, TKey1, TKey2, TKey3> CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> Implements ICrudRepository <TModel, TKey1, TKey2, TKey3> ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public abstract class CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> : LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>, ICrudRepository<TModel, TKey1, TKey2, TKey3>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : class, IModel<TKey1, TKey2, TKey3> where TKey1 : new() where TKey2 : new() where TKey3 : new() Type Parameters Name Description TOptions The options type associated with the repository. TModel The model type associated with the repository. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. TKey3 The key 3 type associated with the model. Constructors CrudRepositoryBase(TOptions) This constructor creates a new instance of the CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> class. Declaration protected CrudRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the repository. Declaration public abstract Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the repository. Declaration public abstract Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the repository. Declaration public abstract Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object. Implements ICrudRepository<TModel, TKey1, TKey2, TKey3> ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.html": {
    "href": "api/CG.Business.Repositories.html",
    "title": "Namespace CG.Business.Repositories",
    "keywords": "Namespace CG.Business.Repositories Classes CrudRepositoryBase<TOptions, TModel, TKey> This class is a base implementation of the ICrudRepository<TModel, TKey> interface. CrudRepositoryBase<TOptions, TModel, TKey1, TKey2> This class is a base implementation of the ICrudRepository<TModel, TKey1, TKey2> interface. CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> This class is a base implementation of the ICrudRepository<TModel, TKey1, TKey2, TKey3> interface. KeyUtility This class utility contains logic related to key values. LinqRepositoryBase<TOptions, TModel> This class represents a base implementation of the CG.Business.Repositories.IRepository interface. LinqRepositoryBase<TOptions, TModel, TKey> This class represents a base implementation of the CG.Business.Repositories.IRepository interface that adds an additional type parameter: TKey . LinqRepositoryBase<TOptions, TModel, TKey1, TKey2> This class represents a base implementation of the CG.Business.Repositories.IRepository interface that adds additional type parameters: TKey1 and TKey2 . LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> This class represents a base implementation of the CG.Business.Repositories.IRepository interface that adds additional type parameters: TKey1 , TKey2 and TKey3 . Interfaces ICrudRepository<TModel, TKey> This interface represents a ILinqRepository<TModel> type that adds additional methods to complete a simple CRUD abstraction. ICrudRepository<TModel, TKey1, TKey2> This interface represents a ILinqRepository<TModel> type that adds additional methods to complete a simple CRUD abstraction. ICrudRepository<TModel, TKey1, TKey2, TKey3> This interface represents a ILinqRepository<TModel> type that adds additional methods to complete a simple CRUD abstraction. ILinqRepository<TModel> This interface represents a repository type that exposes an System.Linq.IQueryable<T> . object, for queries, but has no built-in mechanism for writing to the underyling data store."
  },
  "api/CG.Business.Repositories.ICrudRepository-2.html": {
    "href": "api/CG.Business.Repositories.ICrudRepository-2.html",
    "title": "Interface ICrudRepository<TModel, TKey>",
    "keywords": "Interface ICrudRepository<TModel, TKey> This interface represents a ILinqRepository<TModel> type that adds additional methods to complete a simple CRUD abstraction. Inherited Members ILinqRepository<TModel>.AsQueryable() System.IDisposable.Dispose() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public interface ICrudRepository<TModel, TKey> : ILinqRepository<TModel>, IRepository, IDisposable where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TModel The model type associated with the repository. TKey The key type associated with the model. Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the repository. Declaration Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the repository. Declaration Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the repository. Declaration Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object."
  },
  "api/CG.Business.Repositories.ICrudRepository-3.html": {
    "href": "api/CG.Business.Repositories.ICrudRepository-3.html",
    "title": "Interface ICrudRepository<TModel, TKey1, TKey2>",
    "keywords": "Interface ICrudRepository<TModel, TKey1, TKey2> This interface represents a ILinqRepository<TModel> type that adds additional methods to complete a simple CRUD abstraction. Inherited Members ILinqRepository<TModel>.AsQueryable() System.IDisposable.Dispose() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public interface ICrudRepository<TModel, TKey1, TKey2> : ILinqRepository<TModel>, IRepository, IDisposable where TModel : class, IModel<TKey1, TKey2> where TKey1 : new() where TKey2 : new() Type Parameters Name Description TModel The model type associated with the repository. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the repository. Declaration Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the repository. Declaration Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the repository. Declaration Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object."
  },
  "api/CG.Business.Repositories.ICrudRepository-4.html": {
    "href": "api/CG.Business.Repositories.ICrudRepository-4.html",
    "title": "Interface ICrudRepository<TModel, TKey1, TKey2, TKey3>",
    "keywords": "Interface ICrudRepository<TModel, TKey1, TKey2, TKey3> This interface represents a ILinqRepository<TModel> type that adds additional methods to complete a simple CRUD abstraction. Inherited Members ILinqRepository<TModel>.AsQueryable() System.IDisposable.Dispose() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public interface ICrudRepository<TModel, TKey1, TKey2, TKey3> : ILinqRepository<TModel>, IRepository, IDisposable where TModel : class, IModel<TKey1, TKey2, TKey3> where TKey1 : new() where TKey2 : new() where TKey3 : new() Type Parameters Name Description TModel The model type associated with the repository. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. TKey3 The key 3 type associated with the model."
  },
  "api/CG.Business.Repositories.ILinqRepository-1.html": {
    "href": "api/CG.Business.Repositories.ILinqRepository-1.html",
    "title": "Interface ILinqRepository<TModel>",
    "keywords": "Interface ILinqRepository<TModel> This interface represents a repository type that exposes an System.Linq.IQueryable<T> . object, for queries, but has no built-in mechanism for writing to the underyling data store. Inherited Members System.IDisposable.Dispose() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public interface ILinqRepository<TModel> : IRepository, IDisposable Type Parameters Name Description TModel The model type associated with the repository. Methods AsQueryable() This method returns an System.Linq.IQueryable<T> object from the repository. Declaration IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> An System.Linq.IQueryable<T> object"
  },
  "api/CG.Business.Repositories.KeyUtility.html": {
    "href": "api/CG.Business.Repositories.KeyUtility.html",
    "title": "Class KeyUtility",
    "keywords": "Class KeyUtility This class utility contains logic related to key values. Inheritance System.Object KeyUtility Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public static class KeyUtility Methods CreateRandomKey<TKey>() This method generates random key values for various well-known .NET types. Declaration public static TKey CreateRandomKey<TKey>() where TKey : new() Returns Type Description TKey Type Parameters Name Description TKey The type of associated key. IsKeyMissing<TKey>(TKey) This method indicates whether the specified key value is empty, or not. Declaration public static bool IsKeyMissing<TKey>(TKey key) where TKey : new() Parameters Type Name Description TKey key The key to use for the operation. Returns Type Description System.Boolean True if the key is missing / null / default. Type Parameters Name Description TKey The type of associated key."
  },
  "api/CG.Business.Repositories.LinqRepositoryBase-2.html": {
    "href": "api/CG.Business.Repositories.LinqRepositoryBase-2.html",
    "title": "Class LinqRepositoryBase<TOptions, TModel>",
    "keywords": "Class LinqRepositoryBase<TOptions, TModel> This class represents a base implementation of the CG.Business.Repositories.IRepository interface. Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> LinqRepositoryBase<TOptions, TModel> LinqRepositoryBase<TOptions, TModel, TKey> LinqRepositoryBase<TOptions, TModel, TKey1, TKey2> LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> Implements ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public abstract class LinqRepositoryBase<TOptions, TModel> : RepositoryBase<TOptions>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : class, IModel Type Parameters Name Description TOptions The type of associated options. TModel The type of associated model. Constructors LinqRepositoryBase(TOptions) This constructor creates a new instance of the LinqRepositoryBase<TOptions, TModel> class. Declaration protected LinqRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Methods AsQueryable() This method returns an System.Linq.IQueryable<T> object. Declaration public abstract IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> An System.Linq.IQueryable<T> object Implements ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.LinqRepositoryBase-3.html": {
    "href": "api/CG.Business.Repositories.LinqRepositoryBase-3.html",
    "title": "Class LinqRepositoryBase<TOptions, TModel, TKey>",
    "keywords": "Class LinqRepositoryBase<TOptions, TModel, TKey> This class represents a base implementation of the CG.Business.Repositories.IRepository interface that adds an additional type parameter: TKey . Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> LinqRepositoryBase <TOptions, TModel> LinqRepositoryBase<TOptions, TModel, TKey> CrudRepositoryBase<TOptions, TModel, TKey> Implements ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public abstract class LinqRepositoryBase<TOptions, TModel, TKey> : LinqRepositoryBase<TOptions, TModel>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TOptions The type of associated options. TModel The type of associated model. TKey The key type associated with the model. Constructors LinqRepositoryBase(TOptions) This constructor creates a new instance of the LinqRepositoryBase<TOptions, TModel, TKey> class. Declaration protected LinqRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Implements ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.LinqRepositoryBase-4.html": {
    "href": "api/CG.Business.Repositories.LinqRepositoryBase-4.html",
    "title": "Class LinqRepositoryBase<TOptions, TModel, TKey1, TKey2>",
    "keywords": "Class LinqRepositoryBase<TOptions, TModel, TKey1, TKey2> This class represents a base implementation of the CG.Business.Repositories.IRepository interface that adds additional type parameters: TKey1 and TKey2 . Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> LinqRepositoryBase <TOptions, TModel> LinqRepositoryBase<TOptions, TModel, TKey1, TKey2> CrudRepositoryBase<TOptions, TModel, TKey1, TKey2> Implements ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public abstract class LinqRepositoryBase<TOptions, TModel, TKey1, TKey2> : LinqRepositoryBase<TOptions, TModel>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : class, IModel<TKey1, TKey2> where TKey1 : new() where TKey2 : new() Type Parameters Name Description TOptions The type of associated options. TModel The type of associated model. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. Constructors LinqRepositoryBase(TOptions) This constructor creates a new instance of the LinqRepositoryBase<TOptions, TModel, TKey1, TKey2> class. Declaration protected LinqRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Implements ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.LinqRepositoryBase-5.html": {
    "href": "api/CG.Business.Repositories.LinqRepositoryBase-5.html",
    "title": "Class LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3>",
    "keywords": "Class LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> This class represents a base implementation of the CG.Business.Repositories.IRepository interface that adds additional type parameters: TKey1 , TKey2 and TKey3 . Inheritance System.Object CG.DisposableBase CG.Business.Repositories.RepositoryBase CG.Business.Repositories.RepositoryBase <TOptions> LinqRepositoryBase <TOptions, TModel> LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> CrudRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> Implements ILinqRepository <TModel> CG.Business.Repositories.IRepository System.IDisposable Inherited Members LinqRepositoryBase<TOptions, TModel>.AsQueryable() CG.Business.Repositories.RepositoryBase<TOptions>.Options CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories Assembly : CG.Linq.dll Syntax public abstract class LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> : LinqRepositoryBase<TOptions, TModel>, ILinqRepository<TModel>, IRepository, IDisposable where TOptions : IOptions<RepositoryOptions> where TModel : class, IModel<TKey1, TKey2, TKey3> where TKey1 : new() where TKey2 : new() where TKey3 : new() Type Parameters Name Description TOptions The type of associated options. TModel The type of associated model. TKey1 The key 1 type associated with the model. TKey2 The key 2 type associated with the model. TKey3 The key 3 type associated with the model. Constructors LinqRepositoryBase(TOptions) This constructor creates a new instance of the LinqRepositoryBase<TOptions, TModel, TKey1, TKey2, TKey3> class. Declaration protected LinqRepositoryBase(TOptions options) Parameters Type Name Description TOptions options The options to use with the repository. Implements ILinqRepository<TModel> CG.Business.Repositories.IRepository System.IDisposable"
  },
  "api/CG.Business.Repositories.Options.html": {
    "href": "api/CG.Business.Repositories.Options.html",
    "title": "Namespace CG.Business.Repositories.Options",
    "keywords": "Namespace CG.Business.Repositories.Options Classes LinqRepositoryOptions This class represents configuration options for a LINQ based repository."
  },
  "api/CG.Business.Repositories.Options.LinqRepositoryOptions.html": {
    "href": "api/CG.Business.Repositories.Options.LinqRepositoryOptions.html",
    "title": "Class LinqRepositoryOptions",
    "keywords": "Class LinqRepositoryOptions This class represents configuration options for a LINQ based repository. Inheritance System.Object CG.DataAnnotations.ValidatableObject CG.Options.OptionsBase CG.Business.Repositories.Options.RepositoryOptions LinqRepositoryOptions Implements System.ComponentModel.DataAnnotations.IValidatableObject Inherited Members CG.DataAnnotations.ValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Repositories.Options Assembly : CG.Linq.dll Syntax public class LinqRepositoryOptions : RepositoryOptions, IValidatableObject Properties ConnectionString This property contains the connection string for the LINQ connection. Declaration [Required(ErrorMessageResourceName = \"LinqRepositoryOptions_CS\", ErrorMessageResourceType = typeof(Resources))] public string ConnectionString { get; set; } Property Value Type Description System.String DatabaseName This property contains the name of the associated database, as parsed from the ConnectionString property. Declaration public string DatabaseName { get; } Property Value Type Description System.String MultipleActiveResultSets This property indicated whether the LINQ connection supports multiple active result sets, as parsed from the ConnectionString property. Declaration public bool MultipleActiveResultSets { get; } Property Value Type Description System.Boolean ServerName This property contains the name of the associated server, as parsed from the ConnectionString property. Declaration public string ServerName { get; } Property Value Type Description System.String TrustedConnection This property indicated whether the LINQ connection is trusted, as parsed from the ConnectionString property. Declaration public bool TrustedConnection { get; } Property Value Type Description System.Boolean Implements System.ComponentModel.DataAnnotations.IValidatableObject"
  },
  "api/CG.Business.Stores.CrudStoreBase-3.html": {
    "href": "api/CG.Business.Stores.CrudStoreBase-3.html",
    "title": "Class CrudStoreBase<TModel, TKey, TRepository>",
    "keywords": "Class CrudStoreBase<TModel, TKey, TRepository> This class represents a base implementation of the ICrudStore<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase CG.Business.Stores.StoreBase CrudStoreBase<TModel, TKey, TRepository> CrudStoreBase<TOptions, TModel, TKey, TRepository> Implements ICrudStore <TModel, TKey> CG.Business.Stores.IStore System.IDisposable Inherited Members CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Stores Assembly : CG.Linq.dll Syntax public class CrudStoreBase<TModel, TKey, TRepository> : StoreBase, ICrudStore<TModel, TKey>, IStore, IDisposable where TModel : class, IModel<TKey> where TKey : new() where TRepository : class, ICrudRepository<TModel, TKey> Type Parameters Name Description TModel The model type associated with the repository. TKey The key type associated with the model. TRepository The type of associated repository. Constructors CrudStoreBase(TRepository) This constructor creates a new instance of the CrudStoreBase<TModel, TKey, TRepository> class. Declaration protected CrudStoreBase(TRepository repository) Parameters Type Name Description TRepository repository The repository to use with the store. Properties Repository This property contains a reference to a repository. Declaration protected TRepository Repository { get; } Property Value Type Description TRepository Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the store. Declaration public virtual async Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. AsQueryable() This method returns an System.Linq.IQueryable<T> object from the store.. Declaration public virtual IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> An System.Linq.IQueryable<T> object DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the store. Declaration public virtual async Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. Dispose(Boolean) This method is called to clean up managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True to cleanup managed resources. Overrides CG.DisposableBase.Dispose(System.Boolean) UpdateAsync(TModel, CancellationToken) This method updates a TModel in the store. Declaration public virtual async Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object. Implements ICrudStore<TModel, TKey> CG.Business.Stores.IStore System.IDisposable"
  },
  "api/CG.Business.Stores.CrudStoreBase-4.html": {
    "href": "api/CG.Business.Stores.CrudStoreBase-4.html",
    "title": "Class CrudStoreBase<TOptions, TModel, TKey, TRepository>",
    "keywords": "Class CrudStoreBase<TOptions, TModel, TKey, TRepository> This class represents a base implementation of the ICrudStore<TModel, TKey> interface. Inheritance System.Object CG.DisposableBase CG.Business.Stores.StoreBase CrudStoreBase <TModel, TKey, TRepository> CrudStoreBase<TOptions, TModel, TKey, TRepository> Implements ICrudStore <TModel, TKey> CG.Business.Stores.IStore System.IDisposable Inherited Members CrudStoreBase<TModel, TKey, TRepository>.Repository CrudStoreBase<TModel, TKey, TRepository>.AsQueryable() CrudStoreBase<TModel, TKey, TRepository>.AddAsync(TModel, CancellationToken) CrudStoreBase<TModel, TKey, TRepository>.UpdateAsync(TModel, CancellationToken) CrudStoreBase<TModel, TKey, TRepository>.DeleteAsync(TModel, CancellationToken) CrudStoreBase<TModel, TKey, TRepository>.Dispose(Boolean) CG.DisposableBase.System.IDisposable.Dispose() CG.DisposableBase.Dispose(System.Boolean) CG.DisposableBase.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Business.Stores Assembly : CG.Linq.dll Syntax public abstract class CrudStoreBase<TOptions, TModel, TKey, TRepository> : CrudStoreBase<TModel, TKey, TRepository>, ICrudStore<TModel, TKey>, IStore, IDisposable where TOptions : IOptions<StoreOptions> where TModel : ModelBase<TKey> where TKey : new() where TRepository : class, ICrudRepository<TModel, TKey> Type Parameters Name Description TOptions The type of associated options. TModel The model type associated with the repository. TKey The key type associated with the model. TRepository The type of associated repository. Constructors CrudStoreBase(TOptions, TRepository) This constructor creates a new instance of the CrudStoreBase<TOptions, TModel, TKey, TRepository> class. Declaration protected CrudStoreBase(TOptions options, TRepository repository) Parameters Type Name Description TOptions options The options to use with the store. TRepository repository The repository to use with the store. Properties Options This property contains options for the store. Declaration protected TOptions Options { get; } Property Value Type Description TOptions Implements ICrudStore<TModel, TKey> CG.Business.Stores.IStore System.IDisposable"
  },
  "api/CG.Business.Stores.html": {
    "href": "api/CG.Business.Stores.html",
    "title": "Namespace CG.Business.Stores",
    "keywords": "Namespace CG.Business.Stores Classes CrudStoreBase<TModel, TKey, TRepository> This class represents a base implementation of the ICrudStore<TModel, TKey> interface. CrudStoreBase<TOptions, TModel, TKey, TRepository> This class represents a base implementation of the ICrudStore<TModel, TKey> interface. Interfaces ICrudStore<TModel, TKey> This interface represents a store type that includes basic CRUD operations."
  },
  "api/CG.Business.Stores.ICrudStore-2.html": {
    "href": "api/CG.Business.Stores.ICrudStore-2.html",
    "title": "Interface ICrudStore<TModel, TKey>",
    "keywords": "Interface ICrudStore<TModel, TKey> This interface represents a store type that includes basic CRUD operations. Inherited Members System.IDisposable.Dispose() Namespace : CG.Business.Stores Assembly : CG.Linq.dll Syntax public interface ICrudStore<TModel, TKey> : IStore, IDisposable where TModel : class, IModel<TKey> where TKey : new() Type Parameters Name Description TModel TKey Methods AddAsync(TModel, CancellationToken) This method adds a new TModel to the store. Declaration Task<TModel> AddAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently added TModel object. AsQueryable() This method returns an System.Linq.IQueryable<T> object from the store. Declaration IQueryable<TModel> AsQueryable() Returns Type Description System.Linq.IQueryable <TModel> An System.Linq.IQueryable<T> object DeleteAsync(TModel, CancellationToken) This method deletes a TModel from the store. Declaration Task DeleteAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task A task to perform the operation. UpdateAsync(TModel, CancellationToken) This method updates a TModel in the store. Declaration Task<TModel> UpdateAsync(TModel model, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TModel model The model to use for the operation. System.Threading.CancellationToken cancellationToken A cancellation token. Returns Type Description System.Threading.Tasks.Task <TModel> A task to perform the operation, that returns the recently updated TModel object."
  },
  "api/CG.Collections.Generic.EnumerableExtensions.html": {
    "href": "api/CG.Collections.Generic.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions",
    "keywords": "Class EnumerableExtensions This class contains extension methods related to the System.Collections.Generic.IEnumerable<T> type. Inheritance System.Object EnumerableExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Collections.Generic Assembly : CG.Linq.dll Syntax public static class EnumerableExtensions Methods AlternateElements<T>(IEnumerable<T>) This method returns alternate elements of the specified enumerable sequence. Declaration public static IEnumerable<T> AlternateElements<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The enumerable sequence to use for the operation. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable sequence containing alternate elements of the original sequence. Type Parameters Name Description T The type of associated element. Batch<T>(IEnumerable<T>, Int32) This method creates a smaller batch of items from a larger enumerable sequence. Declaration public static IEnumerable<IEnumerable<T>> Batch<T>(this IEnumerable<T> sequence, int batchSize) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to use for the operation. System.Int32 batchSize The number of items to include in the batch. Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable <T>> An enumerable sequence of T items. Type Parameters Name Description T The type associated with the sequence. SelectManyR<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) This method recursively projects each element of a sequence into an System.Collections.Generic.IEnumerable<T> and flattens the resulting sequences into a single System.Collections.Generic.IEnumerable<T> . Declaration public static IEnumerable<T> SelectManyR<T>(this IEnumerable<T> sequence, Func<T, IEnumerable<T>> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> sequence The sequence to use for the operation. System.Func <T, System.Collections.Generic.IEnumerable <T>> selector The selector to apply for the operation. Returns Type Description System.Collections.Generic.IEnumerable <T> An System.Collections.Generic.IEnumerable<T> whose elements are the result of recursively invoking the one-to-many transform function on each element of the input sequence. Type Parameters Name Description T The type associated with the sequence."
  },
  "api/CG.Collections.Generic.html": {
    "href": "api/CG.Collections.Generic.html",
    "title": "Namespace CG.Collections.Generic",
    "keywords": "Namespace CG.Collections.Generic Classes EnumerableExtensions This class contains extension methods related to the System.Collections.Generic.IEnumerable<T> type."
  },
  "api/CG.Linq.Criteria-1.html": {
    "href": "api/CG.Linq.Criteria-1.html",
    "title": "Class Criteria<TEntity>",
    "keywords": "Class Criteria<TEntity> This class is a generic database query criteria. Inheritance System.Object Criteria<TEntity> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq Assembly : CG.Linq.dll Syntax public abstract class Criteria<TEntity> where TEntity : class Type Parameters Name Description TEntity The type of entity associated with the criteria. Methods AddCriteria(Expression<Func<TEntity, Boolean>>) This method will add an expression to the current criteria. Declaration protected void AddCriteria(Expression<Func<TEntity, bool>> nextExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> nextExpression The expression to add. And(Criteria<TEntity>) This method will chain criteria together using a logical AND. Declaration public Expression<Func<TEntity, bool>> And(Criteria<TEntity> otherCriteria) Parameters Type Name Description Criteria <TEntity> otherCriteria The criteria to chain to this one. Returns Type Description System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> The resulting expression. AsExpression() This method returns the specified Func as a LINQ expression. Declaration public Expression<Func<TEntity, bool>> AsExpression() Returns Type Description System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> An expression. Or(Criteria<TEntity>) This method will chain criteria together using a logical OR. Declaration public Expression<Func<TEntity, bool>> Or(Criteria<TEntity> otherCriteria) Parameters Type Name Description Criteria <TEntity> otherCriteria The criteria to chain to this one. Returns Type Description System.Linq.Expressions.Expression < System.Func <TEntity, System.Boolean >> The resulting expression."
  },
  "api/CG.Linq.ExpressionExtensions.html": {
    "href": "api/CG.Linq.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions",
    "keywords": "Class ExpressionExtensions This class provides extension methods related to the System.Linq.Expressions.Expression type. Inheritance System.Object ExpressionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq Assembly : CG.Linq.dll Syntax public static class ExpressionExtensions Methods AndAlso<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>) This method combines two expressions using a logical AND. Declaration public static Expression<Func<T, bool>> AndAlso<T>(this Expression<Func<T, bool>> left, Expression<Func<T, bool>> right) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> left The left hand side of the operation. System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> right The right hand side of the operation. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> An LINQ expression. Type Parameters Name Description T The type associated with the expressions. BinaryOnExpressions<T>(Expression<Func<T, Boolean>>, ExpressionType, Expression<Func<T, Boolean>>) This method converts the left and right hand expressions into a binary expression. Declaration public static Expression<Func<T, bool>> BinaryOnExpressions<T>(this Expression<Func<T, bool>> left, ExpressionType binaryType, Expression<Func<T, bool>> right) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> left The left hand side of the operation. System.Linq.Expressions.ExpressionType binaryType The type of binary operator to apply. System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> right The right hand side of the operation. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> An LINQ expression. Type Parameters Name Description T The type associated with the expressions. OrElse<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>) This method combines two expressions using a logical OR. Declaration public static Expression<Func<T, bool>> OrElse<T>(this Expression<Func<T, bool>> left, Expression<Func<T, bool>> right) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> left The left hand side of the operation. System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> right The right hand side of the operation. Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> An LINQ expression. Type Parameters Name Description T The type associated with the expressions. RewriteType<TSource, TDest>(Expression<Func<TSource, Boolean>>) This method rewrites the specified LINQ expression to an identical one using another type. The expression itself doesn't change, just the referenced type. Declaration public static Expression<Func<TDest, bool>> RewriteType<TSource, TDest>(this Expression<Func<TSource, bool>> source) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TSource, System.Boolean >> source The LINQ expression to be rewritten. Returns Type Description System.Linq.Expressions.Expression < System.Func <TDest, System.Boolean >> The rewritten LINQ expression. Type Parameters Name Description TSource The source type. TDest The destination type."
  },
  "api/CG.Linq.html": {
    "href": "api/CG.Linq.html",
    "title": "Namespace CG.Linq",
    "keywords": "Namespace CG.Linq Classes Criteria<TEntity> This class is a generic database query criteria. ExpressionExtensions This class provides extension methods related to the System.Linq.Expressions.Expression type. PredicateBuilder This class utility is a LINQ predicate builder."
  },
  "api/CG.Linq.PredicateBuilder.html": {
    "href": "api/CG.Linq.PredicateBuilder.html",
    "title": "Class PredicateBuilder",
    "keywords": "Class PredicateBuilder This class utility is a LINQ predicate builder. Inheritance System.Object PredicateBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CG.Linq Assembly : CG.Linq.dll Syntax public static class PredicateBuilder Methods And<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>) Combines the first predicate with the second using the logical \"and\". Declaration public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> first System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> second Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T Create<T>(Expression<Func<T, Boolean>>) Creates a predicate expression from the specified lambda expression. Declaration public static Expression<Func<T, bool>> Create<T>(Expression<Func<T, bool>> predicate) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> predicate Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T False<T>() This method creates a predicate that evaluates to false. Declaration public static Expression<Func<T, bool>> False<T>() Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T Not<T>(Expression<Func<T, Boolean>>) Negates the predicate. Declaration public static Expression<Func<T, bool>> Not<T>(this Expression<Func<T, bool>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T Or<T>(Expression<Func<T, Boolean>>, Expression<Func<T, Boolean>>) Combines the first predicate with the second using the logical \"or\". Declaration public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> first, Expression<Func<T, bool>> second) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> first System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> second Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T True<T>() This method creates a predicate that evaluates to true. Declaration public static Expression<Func<T, bool>> True<T>() Returns Type Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> Type Parameters Name Description T"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here!",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction",
    "keywords": "Introduction CG.Linq.dll contains LINQ extensions used by other CodeGator packages."
  }
}